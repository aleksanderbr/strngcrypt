{"version":3,"sources":["serviceWorker.js","components/freqencyAnalysis/Barchart.js","components/freqencyAnalysis/data.js","components/general/ExpandMenueInput.js","components/freqencyAnalysis/ChartImporter.js","components/indexOfCoincidence/IndexOfCoincidence.js","components/general/Math.js","components/input/BlockElementInput.js","components/general/BlockElementOutput.js","components/general/BlockConnectorEquals.js","components/general/BlockConnectorPlus.js","components/general/ExplanatoryText.js","components/general/img/caret.svg","components/general/BlockHeadSettings.js","components/caesar/CaesarShift.js","components/general/Alphabet.js","components/general/CaseChars.js","components/affine/Alpha.js","components/vigenere/KeywordVigenere.js","components/playfair/KeywordPlayfair.js","components/playfair/CharOptions.js","components/playfair/PlayfairSquare.js","components/replace/ReplaceKeys.js","components/skytale/RingLenght.js","components/skytale/Rings.js","components/caesar/CaesarTransposition.js","components/atbash/AtbashTransposition.js","components/onetimepad/otpGenerate.js","components/math/Math.js","components/rsa/RSALogic.js","components/rsa/Primes.js","components/general/settings.js","components/general/BlockElementSettings.js","components/modal/Modal.js","components/caesar/CaesarLogic.js","components/affine/AffineLogic.js","components/vigenere/VigenereLogic.js","components/playfair/PlayfairLogic.js","components/morse/Morselogic.js","components/replace/ReplaceLogic.js","components/skytale/SkytaleLogic.js","components/atbash/AtbashLogic.js","components/timeline/Timeline.js","components/general/Footer.js","components/onetimepad/otp.js","components/general/BlockElementsCollector.js","components/hero/index.js","components/general/Header.js","components/signup/index.js","components/App.js","index.js","components/general/img/key.png"],"names":["Boolean","window","location","hostname","match","BarChart","data","alphabet","inputValue","svgRef","useRef","wrapperRef","dimensions","ref","useState","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","useResizeObserver","frequency","arr","map","Array","fill","toString","element","index","indexOf","toLowerCase","letterFrequency","totalLetters","reduce","a","b","freq","char","svg","select","frequencyMax","xScale","scaleBand","domain","value","range","width","padding","d3","yScale","scaleLinear","height","colorScale","clamp","xAxis","axisBottom","ticks","length","style","call","yAxis","axisLeft","selectAll","join","attr","bandwidth","on","enter","append","text","transition","remove","toFixed","className","marginBottom","ExpandMenueInput","expMenue","helperText","method","menue","document","getElementsByClassName","StyledTooltip","withStyles","theme","tooltip","backgroundColor","color","maxWidth","fontSize","typography","pxToRem","border","Tooltip","icTooltip","title","Fragment","Typography","Button","onClick","maxHeight","scrollHeight","ChartImporter","split","id","Barchart","IndexOfCoincidence","ioc","math","removeSigns","textinput","output","push","addSpaces","userinput","encrypted","i","splice","addSigns","textoutput","correctCase","userInput","noSigns","caseCorrected","toUpperCase","autoresize","evt","el","target","computed","getComputedStyle","parseInt","getPropertyValue","BlockElementInput","updateInput","name","defaultValue","onChange","borderTop","BlockElementOutput","getElementById","prevProps","outputValue","this","props","React","Component","useStyles","makeStyles","root","heading","fontWeight","fontWeightRegular","body","ExplanatoryText","expText","direction","classes","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-controls","ExpansionPanelDetails","href","_extends","Object","assign","arguments","source","key","prototype","hasOwnProperty","apply","_objectWithoutProperties","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","_ref2","createElement","points","_ref","x","y","viewBox","enableBackground","xmlSpace","ForwardRef","forwardRef","BlockHeadSettings","switchModal","methodNameInset","changeDirection","switchClassName","buttons","button","CaesarShift","plusMinus","cShift","Alphabet","alphabetUpdate","alphabetActive","boxShadow","readOnly","CaseChars","state","include","ignore","changeClass","bind","setState","selectCase","borderRight","includeChars","PureComponent","Alpha","setAlpha","setBeta","textTransform","KeywordVigenere","keyword","updateKeyword","KeywordPlayfair","CharOptions","encrypt","PlayfaireSquare","createVisualMatrix","parent","children","ID","playSquare","Replace","setReplaceLetters","toReplaceLetter","replaceLetter","RingLength","ringLength","Rings","planeNumber","character","ringNumber","firstCharacterStyle","transparencyValue","d","Math","PI","rotateValue","WebkitTransform","indexOfCharacter","generateRingStyles","generateOneRingElement","skytaleLength","generateAllRingElements","display","flexDirection","alignItems","justifyContent","generateAllRings","fontStyle","lineHeight","CaesarTransposition","genAlphabet","sort","Set","counter","genShifted","shift","temp","AtbashTransposition","reverse","Otp","genRandomKey","otpKey","transformCaseAndChars","rawOutput","caseFormat","cleanOutput","restoreForeignChars","restoreCase","cleanInput","input","blankSpaces","caseSensitive","alphab","inputArr","filter","restoredCaseArr","String","restoredForeignCharsArr","modInverse","bigintModArith","require","rsa","prime_one","prime_two","e","phi","n","t0","performance","now","gcd","BigInt","dezArr","charCodeAt","longNumber","encryptedDEZ","modPow","t1","textToHex","hexArr","hexCode","Number","hexToDecimal","decimalArr","bigToNumber","numberArr","decimalToHex","calcD","modInv","calcPhi","bigP1","bigP2","big1","setPrimeOne","val","setPrimeTwo","setE","calcN","setUserInput","decrypt","decryptedDEZ","decryptedArr","slice","console","log","decryptedLetters","fromCharCode","Primes","cleanPrime","rawInput","type","borderBottom","timeToCalculate","BlockBodyInput","bodyInput","caesarPlusMinus","skytalePlusMinus","skytaleProjectedValue","PlayfairSquare","ReplaceKeys","switchBodyInput","BlockElementSettings","updateOtpKey","Modal","modalVisible","changeMethod","caesar","saltInput","wordbook","charIndex","alLength","readCharCrack","salt","decryptedChars","charLower","includes","position","charIndexCrack","createAllOutputs","removeSignsKeepSpaces","loadWordbook","words","allOutputs","possibleCombinations","word","result","findWords","setSaltInput","setAlphabet","setDirection","setWordbook","setForeignChars","setCase","decryptedChar","readChar","affine","alpha","beta","correctedInput","modulo","lowerInput","numberId","undefined","inverseAlpha","indexChar","resultIndex","vigenere","keywordVigenere","createSaltArray","textInput","saltArray","alphabetFromCharacter","alphabetVig","encryptCharacterVigenere","saltLetter","decryptCharacterVigenere","vigalphabet","caseTransform","spaces","setKeyword","replace","textinputCleaned","Playfair","keyphrase","rowColumnEncrypt","charPair","chars","newIndex","methodFinder","fiveElementPairs","pair","createPairsOfFive","fiveElementPairsReverse","columnArr","j","encryptedChar1","encryptedChar2","indexes","char1","char2","setKeyPhrase","getSquare","pairs","twoLetterPairs","cleanText","transformInput","morse","characters","inputArray","outputArray","lowerChar","values","find","trim","str1","str2","RegExp","setToReplaceLetter","setReplaceLetter","skytale","calcSkytaleLength","ceil","transformText","skytaleArr","encryptedText","skytaleRows","lastRowLength","skyArr","indexOne","restInput","indexTwo","flat","setRingLength","getProjectedValue","projectedValue","tempVal","atbash","alphabetReverse","Timeline","viewportWidth","vw","next","previous","oldSlide","activeSlide","activeSlide2","max","documentElement","clientWidth","innerWidth","slider","slickNext","slickPrev","goToIndex","elem1","parentElement","elem2","classList","contains","dataIndex1","getAttribute","dataIndex2","prevState","listMethods","changed","listMethod","slickGoTo","settings","infinite","speed","slidesToShow","slidesToScroll","arrows","initialSlide","beforeChange","afterChange","c","Footer","otp","setKey","ind","encryptedKey","indexKey","BlockElementsCollector","affineAlpha","affineBeta","iocInput","iocOutput","xPos","yPos","indexOfCoincidenceInputOutput","innerText","fetch","response","json","snapshot","randomArr","letters","userInputLength","floor","random","cleanedInput","arrCounts","count","isNaN","calcIndexOfCoincidence","tVal","foreignChars","Caesar","Atbash","Rsa","decrypted","Affine","Vigenere","Morse","Skytale","BlockConnectorPlus","BlockConnectorEquals","Hero","setTimeout","hash","navbarHeight","clientHeight","querySelector","offsetTop","scroll","preventDefault","scrollToSignup","xmlns","onMouseOut","add","onMouseMove","x1","y1","x2","y2","offset","stopColor","stopOpacity","cx","cy","r","Header","src","logo","alt","paper","marginTop","spacing","borderColor","avatar","margin","palette","secondary","main","form","submit","App","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.db8e93de.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, axisBottom, axisLeft, scaleLinear, scaleBand } from \"d3\";\r\nimport ResizeObserver from \"resize-observer-polyfill\";\r\nimport * as d3 from 'd3'\r\n\r\nconst useResizeObserver = ref => {\r\n  const [dimensions, setDimensions] = useState(null);\r\n  useEffect(() => {\r\n    const observeTarget = ref.current;\r\n    const resizeObserver = new ResizeObserver(entries => {\r\n      entries.forEach(entry => {\r\n        setDimensions(entry.contentRect);\r\n      });\r\n    });\r\n    resizeObserver.observe(observeTarget);\r\n    return () => {\r\n      resizeObserver.unobserve(observeTarget);\r\n    };\r\n  }, [ref]);\r\n  return dimensions;\r\n};\r\n\r\nfunction BarChart({ data, alphabet, inputValue }) {\r\n  const svgRef = useRef();\r\n  const wrapperRef = useRef();\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n\r\n  // will be called initially and on every data change\r\n  useEffect(() => {\r\n    if(!inputValue) return undefined\r\n    //if(container[0].clientHeight <= 46) return undefined\r\n    const letterFrequency = () => {\r\n      let map = new Array(26).fill(0)\r\n      \r\n      for(let element of inputValue.toString()) {\r\n          let index = alphabet.indexOf(element.toLowerCase())\r\n          if(index !== -1) map[index] += 1\r\n      }\r\n      return map\r\n    }\r\n\r\n    const frequency = () => {\r\n        let arr = letterFrequency()\r\n        let totalLetters = arr.reduce((a, b) => a + b, 0)\r\n        let freq = new Array(26).fill(0)\r\n\r\n        let index = 0;\r\n        for(let char of arr) {\r\n            if(char !== 0) freq[index] = char / totalLetters * 100\r\n            index++\r\n        }\r\n        return freq\r\n    }  \r\n\r\n    frequency()\r\n\r\n    const svg = select(svgRef.current);\r\n\r\n    if (!dimensions) return;\r\n\r\n    // scales\r\n    const xScale = scaleBand()\r\n      .domain(alphabet.map((value, index) => value))\r\n      .range([0, dimensions.width]) // change\r\n      .padding(0.2);\r\n\r\n    let frequencyMax;\r\n    d3.max(frequency()) > 15 ? frequencyMax = d3.max(frequency()) : frequencyMax = 15\r\n\r\n    const yScale = scaleLinear()\r\n      .domain([0, frequencyMax]) // todo\r\n      .range([dimensions.height, 0]); // change\r\n\r\n    const colorScale = scaleLinear()\r\n      .domain([0, 20])\r\n      .range([\"#ffadb7\", \"#ff0022\"])\r\n      .clamp(true);\r\n\r\n    // create x-axis\r\n    const xAxis = axisBottom(xScale).ticks(data.length);\r\n    svg\r\n      .select(\".x-axis\")\r\n      .style(\"transform\", `translateY(${dimensions.height}px)`)\r\n      .call(xAxis);\r\n\r\n    // create y-axis\r\n    const yAxis = axisLeft(yScale);\r\n    svg\r\n      .select(\".y-axis\")\r\n      .call(yAxis);\r\n\r\n    // draw the bars\r\n    svg\r\n      .selectAll(\".bar\")\r\n      .data(data)\r\n      .join(\"rect\")\r\n      .attr(\"class\", \"bar\")\r\n      .style(\"transform\", \"scale(1, -1)\")\r\n      .attr(\"x\", (value, index) => xScale(alphabet[index]))\r\n      .attr(\"y\", -dimensions.height)\r\n      .attr(\"width\", xScale.bandwidth())\r\n      .on(\"mouseenter\", (value, index) => {\r\n        svg\r\n          .selectAll(\".tooltip\")\r\n          .data([value])\r\n          .join(enter => enter.append(\"text\").attr(\"y\", yScale(value) - 4))\r\n          .attr(\"class\", \"tooltip\")\r\n          .text(value)\r\n          .attr(\"x\", xScale(alphabet[index]) + xScale.bandwidth() / 2)\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .transition()\r\n          .attr(\"y\", yScale(value) - 8)\r\n          .attr(\"opacity\", 1)\r\n          .attr('fill', 'white')\r\n      })\r\n      .on(\"mouseleave\", () => svg.select(\".tooltip\").remove())\r\n      .transition()\r\n      .attr(\"fill\", colorScale)\r\n      .attr(\"height\", value => dimensions.height - yScale(value));\r\n    svg\r\n      .selectAll('.circle')\r\n      .data(frequency())\r\n      .join('circle')\r\n      .attr('class', 'circle')\r\n      .style('transform', 'scale(1, -1)')\r\n      .attr('r', xScale.bandwidth() / 5)\r\n      .attr('cx', (value, index) => xScale(alphabet[index]) + xScale.bandwidth() / 2)\r\n      .attr('cy', value =>  -dimensions.height + dimensions.height - yScale(value))\r\n      .attr(\"fill\", '#ffffff20')\r\n      .style('stroke', '#327ca7')\r\n      .on(\"mouseenter\", (value, index) => {\r\n        svg\r\n          .selectAll(\".tooltip\")\r\n          .data([value.toFixed(2)])\r\n          .join(enter => enter.append(\"text\").attr(\"y\", yScale(value) - 4))\r\n          .attr(\"class\", \"tooltip\")\r\n          .text(value.toFixed(2))\r\n          .attr(\"x\", xScale(alphabet[index]) + xScale.bandwidth() / 2)\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .transition()\r\n          .attr(\"y\", yScale(value) - 8)\r\n          .attr(\"opacity\", 1)\r\n          .attr('fill', 'white')\r\n      })\r\n\r\n  }, [data, dimensions, alphabet, inputValue]);\r\n\r\n  return (\r\n    <div ref={wrapperRef} className=\"svgWrapper\" style={{ marginBottom: \"2rem\"}}>\r\n      <svg ref={svgRef}>\r\n        <g className=\"x-axis\" />\r\n        <g className=\"y-axis\" />\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BarChart;","export default [\r\n    8.167, \r\n    1.492, \r\n    2.202, \r\n    4.253, \r\n    12.70, \r\n    2.228, \r\n    2.015, \r\n    6.094, \r\n    6.966, \r\n    0.153, \r\n    1.292, \r\n    4.025, \r\n    2.406, \r\n    6.749, \r\n    7.507, \r\n    1.929, \r\n    0.095, \r\n    5.987, \r\n    6.327, \r\n    9.356, \r\n    2.758, \r\n    0.978, \r\n    2.560, \r\n    0.150, \r\n    1.994, \r\n    0.077\r\n]","import React from 'react'\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport InfoIcon from '@material-ui/icons/Info';\r\n\r\nfunction ExpandMenueInput({method, menue}) {\r\n\r\n    let expMenue\r\n    let helperText\r\n    let index\r\n\r\n    switch(method) {\r\n        case 'Frequency Analysis':\r\n            index = menue === 'output' ? 1 : 0\r\n            expMenue = document.getElementsByClassName('expand_menue')[index]\r\n            helperText = (\r\n                `Studies the distribution and frequency of letters in a text. Every language has a unique pattern of\r\n                letter distribution and is identifiable by that pattern on a chart. Different encryption methods show\r\n                distinguished pattern changes in the graph and make the frequency analysis a good tool to solve classic\r\n                ciphertexts.`\r\n            )\r\n\r\n            break\r\n        case 'Index of Coincidence':\r\n            index = menue === 'output' ? 1 : 0\r\n            expMenue = document.getElementsByClassName('coincidence_menue')[index]\r\n            helperText = (\r\n                `Is an indicator for the frequency of wich letters appears in a text.\r\n                Different languages and encryption algorithms have distinguishable IC's. This makes the IC a good tool\r\n                to analyse how a given text is encrypted. F.e. the skytale method isn't transforming a letter, just it's\r\n                placement. The IC stays exactly the same. A One time pad algorithm is equalizing the distribution \r\n                of letters and has an equal chance for every given letter to appear. The IC will be 0.037 - 0.038 (1/26).`\r\n                )\r\n            break\r\n        default: \r\n            return\r\n    }\r\n\r\n    const StyledTooltip = withStyles(theme => ({\r\n        tooltip: {\r\n            backgroundColor: '#f5f5f9',\r\n            color: 'rgba(0, 0, 0, 0.87)',\r\n            maxWidth: 420,\r\n            fontSize: theme.typography.pxToRem(12),\r\n            border: '1px solid #dadde9',\r\n          },\r\n    }))(Tooltip);\r\n\r\n    let icTooltip = (\r\n        <StyledTooltip\r\n            title={\r\n            <React.Fragment>\r\n                <Typography color=\"inherit\">{method}</Typography>\r\n                {helperText}\r\n            </React.Fragment>\r\n            }\r\n        >\r\n            <Button><InfoIcon></InfoIcon></Button>\r\n        </StyledTooltip>\r\n    )\r\n\r\n\r\n    return (\r\n        <div className=\"expandbutton_field\" onClick={() => {\r\n            if(expMenue) {\r\n                if (expMenue.style.maxHeight){\r\n                    expMenue.style.maxHeight = null\r\n                  } else {\r\n                    expMenue.style.maxHeight = expMenue.scrollHeight + \"px\";\r\n                  } \r\n            }\r\n        }}>\r\n            <div className=\"expandbutton_name\">{method}</div>\r\n            <div className=\"informational_modal\">{icTooltip}</div>\r\n            <div className=\"controll_handles\">\r\n                <div className=\"button_menue\"></div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default ExpandMenueInput","import React, { useState } from 'react'\r\nimport Barchart from './Barchart'\r\nimport freq from './data'\r\nimport ExpandMenueInput from '../general/ExpandMenueInput'\r\n\r\nfunction ChartImporter({inputValue, menue}) {\r\n    const [data] = useState([...freq])\r\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'.split('')\r\n    \r\n    return (\r\n        <div className=\"controller\">\r\n                {menue === 'input' ? <ExpandMenueInput menue={menue} method = 'Frequency Analysis'/> : <ExpandMenueInput menue={menue} method = 'Frequency Analysis'/>}\r\n            <div className=\"expand_menue\">\r\n                <div className=\"collector_freq_button\">\r\n                    \r\n                </div>\r\n                <div id=\"freq\">\r\n                    <React.Fragment>\r\n                        <Barchart \r\n                            data={data} \r\n                            alphabet={alphabet} \r\n                            inputValue={inputValue}\r\n                        />\r\n                    </React.Fragment>\r\n                </div>    \r\n                <div>\r\n                    <p id=\"freq_explanatory_text\"> \r\n                        The blue <b>dots</b> represent your input. The red <b>bars </b>\r\n                        represent the standart distributon of letters in the english language.\r\n                    </p>\r\n                </div>    \r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default ChartImporter","import React from 'react'\r\nimport ExpandMenueInput from '../general/ExpandMenueInput'\r\nfunction IndexOfCoincidence({ioc, menue}) {\r\n    \r\n    return (\r\n        <div className=\"controller\">\r\n                {menue === 'input' ? <ExpandMenueInput menue = {menue} method = 'Index of Coincidence'/> : <ExpandMenueInput menue = {menue} method = 'Index of Coincidence'/>}\r\n            <div className=\"coincidence_menue\">\r\n                <h1>{ioc}</h1>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default IndexOfCoincidence","const math = (() => {\r\n\r\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz'\r\n\r\n    const addSigns = (textoutput, textinput) => {\r\n        let output = [];\r\n        let i = 0;\r\n        for(let element of textinput) {\r\n            if(alphabet.indexOf(element.toLowerCase()) === -1) {\r\n                output.push(element);\r\n                if(element === ' ') i++\r\n            } else {\r\n                output.push(textoutput[i]);\r\n                i++;\r\n            }\r\n        }\r\n        return output.join('');\r\n    }\r\n\r\n    const addSpaces = (userinput, encrypted) => {\r\n        let arr =  [...encrypted]\r\n        for(let i = 0; i < userinput.length; i++) {\r\n            if(userinput[i] === ' ') {\r\n                arr.splice(i, 0, userinput[i]);\r\n            }\r\n        }\r\n        return arr.join('')\r\n    }\r\n\r\n    const removeSigns = (textinput) => {\r\n        textinput = textinput.toLowerCase()\r\n        let output = [];\r\n        for(let char of textinput) {\r\n            if(alphabet.indexOf(char) !== -1) {\r\n                output.push(char);\r\n            }\r\n        }\r\n        return output.join('');\r\n    }\r\n\r\n    const correctCase = (userInput, output) => {\r\n        let noSigns = []\r\n        for(let char of userInput) {\r\n            if(alphabet.indexOf(char.toLowerCase()) !== -1 || char === ' ') {\r\n                noSigns.push(char)\r\n            }\r\n        }\r\n        noSigns = noSigns.join('')\r\n\r\n        let caseCorrected = []\r\n\r\n        for(let i = 0; i < userInput.length; i++) {\r\n            if(userInput[i].toLowerCase() === userInput[i]) {\r\n                caseCorrected.push(output[i])\r\n            } else {\r\n                caseCorrected.push(output[i].toUpperCase())\r\n            }\r\n        }\r\n        return caseCorrected.join('')\r\n    }\r\n\r\n    const autoresize = (evt) => {\r\n        let el = evt.target;\r\n        el.style.height = 'inherit'\r\n        let computed = window.getComputedStyle(el)\r\n        let height = parseInt(computed.getPropertyValue('border-top-width'), 10)\r\n        + parseInt(computed.getPropertyValue('padding-top'), 10)\r\n        + el.scrollHeight\r\n        + parseInt(computed.getPropertyValue('padding-bottom'), 10)\r\n        + parseInt(computed.getPropertyValue('border-bottom-width'), 10);\r\n        el.style.height = height + 'px'\r\n      }\r\n    \r\n\r\n    return {\r\n        removeSigns: removeSigns,\r\n        addSpaces: addSpaces,\r\n        addSigns: addSigns,\r\n        correctCase: correctCase,\r\n        autoresize: autoresize\r\n    }\r\n})();\r\n\r\n\r\nexport default math;","import React from 'react'\r\nimport ChartImporter from '../freqencyAnalysis/ChartImporter'\r\nimport IndexOfCoincidence from '../indexOfCoincidence/IndexOfCoincidence'\r\nimport math from '../general/Math'\r\n\r\nconst BlockElementInput = ({updateInput, inputValue, ioc}) => {\r\n\r\n  return (\r\n      <div className=\"block\" id=\"user_input\">\r\n        <div className=\"block_head\">\r\n            <div className=\"block_head_text\">Input</div>\r\n        </div>\r\n        <div className=\"block_body\">\r\n            <div className=\"block_body_input\">\r\n                <textarea \r\n                  name=\"userinput\" \r\n                  id=\"userinput\" \r\n                  defaultValue={inputValue} \r\n                  onClick = {(evt) => {\r\n                    updateInput(evt)\r\n                    math.autoresize(evt)\r\n                  }}\r\n                  onChange={(evt) => {\r\n                    updateInput(evt)\r\n                    math.autoresize(evt)\r\n                  }}\r\n                />\r\n            </div>\r\n        </div>\r\n          <div className=\"chartcontainer\" style={{width: '100%', borderTop: 'none'}}>\r\n            <ChartImporter inputValue={inputValue} menue={'input'}/>\r\n          </div>\r\n          <div className=\"chartcontainer\" style={{width: '100%'}}>\r\n            <IndexOfCoincidence ioc = {ioc} menue={'input'}/>\r\n          </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default BlockElementInput\r\n\r\n","import React from 'react'\r\nimport ChartImporter from '../freqencyAnalysis/ChartImporter'\r\nimport IndexOfCoincidence from '../indexOfCoincidence/IndexOfCoincidence'\r\n\r\nclass BlockElementOutput extends React.Component {\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.outputValue !== this.props.outputValue) {\r\n      this.autoresize()\r\n    }\r\n  }\r\n\r\n  autoresize = () => {\r\n    let el = document.getElementById('output')\r\n    el.style.height = 'inherit'\r\n    let computed = window.getComputedStyle(el)\r\n    let height = parseInt(computed.getPropertyValue('border-top-width'), 10)\r\n    + parseInt(computed.getPropertyValue('padding-top'), 10)\r\n    + el.scrollHeight\r\n    + parseInt(computed.getPropertyValue('padding-bottom'), 10)\r\n    + parseInt(computed.getPropertyValue('border-bottom-width'), 10);\r\n    el.style.height = height + 'px'\r\n  }\r\n\r\n  render() {\r\n      return (\r\n        <div className=\"block\">\r\n          <div className=\"block_head\">\r\n              <div className=\"block_head_text\">Output</div>\r\n          </div>\r\n          <div className=\"block_body\">\r\n                <div className=\"block_body_output\">\r\n                  <textarea\r\n                    name=\"output\" \r\n                    id=\"output\" \r\n                    value={this.props.outputValue}\r\n                    onChange={(evt) => {\r\n                      this.value = this.props.outputValue\r\n                      this.autoresize()\r\n                    }}\r\n                  >\r\n                  </textarea>\r\n              </div>\r\n          </div>\r\n            <div className=\"chartcontainer\" style={{width: '100%', borderTop: 'none'}}>\r\n              <ChartImporter inputValue={this.props.outputValue} menue = {'output'}/>\r\n            </div>\r\n            <div className=\"chartcontainer\" style={{width: '100%'}}>\r\n              <IndexOfCoincidence ioc = {this.props.ioc} menue={'output'}/>\r\n            </div>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default BlockElementOutput\r\n\r\n","import React from 'react'\r\n\r\nexport default () => <div className=\"block_connector\">=</div>\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport default () => <div className=\"block_connector\">+</div>\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel'\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary'\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n  body: {\r\n    fontSize: '14px'\r\n  }\r\n\r\n}));\r\n\r\nconst ExplanatoryText = ({direction, method}) => {\r\n  const classes = useStyles();\r\n  let expText\r\n  if(method === 'atbash') {\r\n    if(direction !== 'crack') {\r\n      expText = \r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel2a-content\"\r\n          id=\"panel2a-header\"\r\n        >\r\n          <Typography className={classes.heading}>More Details</Typography>\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n          <Typography className={classes.body}>\r\n            <p>\r\n              Atbash (Hebrew: אתבש‎; also transliterated Atbaš) is a monoalphabetic \r\n              substitution cipher originally used to encrypt the Hebrew alphabet. \r\n              It can be modified for use with any known writing system with a standard \r\n              collating order.\r\n            </p>\r\n            <a href=\"https://en.wikipedia.org/wiki/Atbash\" target=\"blank\">Atbash Cipher Wikipedia</a>\r\n          </Typography>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n        \r\n    } \r\n    else {\r\n      expText = \r\n      \r\n        <div className=\"controller explanation\">\r\n          <p className=\"block_method_explanation\">\r\n            The cracking function does exactly the same as the encryption- and decryption algorithm.\r\n            There is only one possibility for an encrypted letter to go to. F.e. the letter 'A' will\r\n            always be mapped to 'Z' and 'Z' will always be mapped back to 'A'.\r\n          </p>\r\n          <a href=\"https://en.wikipedia.org/wiki/Atbash\" target=\"blank\">Atbash Cipher Wikipedia</a>\r\n        </div>\r\n    }\r\n  }\r\n  if(method === 'caesar') {\r\n    if(direction !== 'crack') {\r\n      expText =     \r\n        <ExpansionPanel>\r\n          <ExpansionPanelSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-controls=\"panel2a-content\"\r\n            id=\"panel2a-header\"\r\n          >\r\n            <Typography className={classes.heading}>More Details</Typography>\r\n          </ExpansionPanelSummary>\r\n          <ExpansionPanelDetails>\r\n            <Typography className={classes.body}>\r\n              <p>\r\n                In cryptography, a Caesar cipher, also known as Caesar's cipher, the shift \r\n                cipher, Caesar's code or Caesar shift, is one of the simplest and most \r\n                widely known encryption techniques. It is a type of substitution cipher \r\n                in which each letter in the plaintext is replaced by a letter some fixed \r\n                number of positions down the alphabet. For example, with a left shift of 3,\r\n                D would be replaced by A, E would become B, and so on. The method is named \r\n                after Julius Caesar, who used it in his private correspondence.\r\n              </p>\r\n              <a href=\"https://en.wikipedia.org/wiki/Caesar_cipher\" target=\"blank\">Caesar's cipher Wikipedia</a>\r\n            </Typography>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n    } else {\r\n        expText =     \r\n        <div className=\"controller explanation\">\r\n          <p className=\"block_method_explanation\">\r\n            <b style={{fontSize: '1.25em'}}>Use this functionality on encrypted texts!</b><br></br><br></br>\r\n\r\n            This method uses a brute force attack with the english dictionary. \r\n            It gave better results for shorter phrases and words then frequency analysis.\r\n            If you want to decode longer texts it might be a bit slower though ;)\r\n          </p>\r\n          <a href=\"https://en.wikipedia.org/wiki/Caesar_cipher\" target=\"blank\">Caesar's cipher Wikipedia</a>\r\n        </div>\r\n    }\r\n  } else if(method === 'affine') {\r\n      if(direction === 'crack') {\r\n        expText = \r\n          <div className=\"controller explanation\">\r\n            <p className=\"block_method_explanation\">\r\n              No Crack function yet  :(\r\n            </p>\r\n            <a href=\"https://en.wikipedia.org/wiki/Affine_cipher\" target=\"blank\">Affine cipher Wikipedia</a>\r\n          </div>\r\n      } else {\r\n        expText =   \r\n          <ExpansionPanel>\r\n            <ExpansionPanelSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel2a-content\"\r\n              id=\"panel2a-header\"\r\n            >\r\n              <Typography className={classes.heading}>More Details</Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n              <Typography className={classes.body}>\r\n                <p>\r\n                  The affine is a type of monoalphabetic substitution cipher, where each letter in an alphabet \r\n                  is mapped to its numeric equivalent, encrypted using a simple mathematical function, and \r\n                  converted back to a letter. The formula used means that each letter encrypts to one other \r\n                  letter, and back again, meaning the cipher is essentially a standard substitution cipher \r\n                  with a rule governing which letter goes to which. As such, it has the weaknesses of all \r\n                  substitution ciphers. Each letter is enciphered with the function (ax + b) mod 26, where b \r\n                  is the magnitude of the shift.\r\n                </p>\r\n                <a href=\"https://en.wikipedia.org/wiki/Affine_cipher\" target=\"blank\">Affine Cipher Wikipedia</a>\r\n              </Typography>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n      } \r\n  } else if(method === 'vigenere') {\r\n      if(direction === 'crack') {\r\n        expText = \r\n        <div className=\"controller explanation\">\r\n          <p className=\"block_method_explanation\">\r\n            No Crack function yet  :(\r\n          </p>\r\n          <a href=\"https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher\" target=\"blank\">Vigenere Cipher Wikipedia</a>\r\n        </div>\r\n      } else {\r\n        expText =    \r\n          <ExpansionPanel>\r\n            <ExpansionPanelSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel2a-content\"\r\n              id=\"panel2a-header\"\r\n            >\r\n              <Typography className={classes.heading}>More Details</Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n              <Typography className={classes.body}>\r\n                <p>\r\n                The Vigenère cipher is a method of encrypting alphabetic text \r\n                by using a series of interwoven Caesar ciphers, based on the letters of a keyword. It employs a \r\n                form of polyalphabetic substitution.\r\n      \r\n                First described by Giovan Battista Bellaso in 1553, the cipher is easy to understand and implement, \r\n                but it resisted all attempts to break it until 1863, three centuries later. This earned it the description \r\n                le chiffre indéchiffrable (French for 'the indecipherable cipher'). Many people have tried to \r\n                implement encryption schemes that are essentially Vigenère ciphers. In 1863, Friedrich Kasiski was \r\n                the first to publish a general method of deciphering Vigenère ciphers.\r\n      \r\n                In the 19th century the scheme was misattributed to Blaise de Vigenère (1523–1596), and so acquired \r\n                its present name.\r\n                </p>\r\n                <a href=\"https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher\" target=\"blank\">Vigenere Cipher Wikipedia</a>\r\n              </Typography>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel> \r\n      } \r\n  } else if(method === 'playfair') {\r\n      if(direction === 'crack') {\r\n        expText = \r\n        <div className=\"controller explanation\">\r\n          <p className=\"block_method_explanation\">\r\n            No Crack function yet  :(\r\n          </p>\r\n          <a href=\"https://en.wikipedia.org/wiki/Playfair_cipher\" target=\"blank\">Playfair Cipher Wikipedia</a>\r\n        </div>\r\n      } else {\r\n        expText =  \r\n          <ExpansionPanel>\r\n            <ExpansionPanelSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel2a-content\"\r\n              id=\"panel2a-header\"\r\n            >\r\n              <Typography className={classes.heading}>More Details</Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n              <Typography className={classes.body}>\r\n                <p>\r\n                  The Playfair cipher or Playfair square or Wheatstone-Playfair cipher is a manual symmetric encryption \r\n                  technique and was the first literal digram substitution cipher. The scheme was invented in 1854 by \r\n                  Charles Wheatstone, but bears the name of Lord Playfair for promoting its use.\r\n\r\n                  The technique encrypts pairs of letters (bigrams or digrams), instead of single letters as in the simple \r\n                  substitution cipher and rather more complex Vigenère cipher systems then in use. The Playfair is thus \r\n                  significantly harder to break since the frequency analysis used for simple substitution ciphers does \r\n                  not work with it. The frequency analysis of bigrams is possible, but considerably more difficult. With \r\n                  600 possible bigrams rather than the 26 possible monograms (single symbols, usually letters in this context),\r\n                  a considerably larger cipher text is required in order to be useful.\r\n                </p>\r\n                <a href=\"https://en.wikipedia.org/wiki/Playfair_cipher\" target=\"blank\">Playfair Cipher Wikipedia</a>\r\n              </Typography>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel> \r\n      } \r\n  } else if(method === 'morse') {\r\n      if(direction === 'crack') {\r\n        expText = \r\n        <div className=\"controller explanation\">\r\n          <p className=\"block_method_explanation\">\r\n            No Crack function yet  :(\r\n          </p>\r\n          <a href=\"https://en.wikipedia.org/wiki/Morse_code\" target=\"blank\">Morse Code Wikipedia</a>\r\n        </div>\r\n      } else {\r\n        expText =     \r\n          <ExpansionPanel>\r\n            <ExpansionPanelSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel2a-content\"\r\n              id=\"panel2a-header\"\r\n            >\r\n              <Typography className={classes.heading}>More Details</Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n              <Typography className={classes.body}>\r\n                <p>\r\n                  The International Morse Code encodes the 26 English letters A through Z, some non-English letters, the Arabic \r\n                  numerals and a small set of punctuation and procedural signals (prosigns). There is no distinction between upper\r\n                  and lower case letters. Each Morse code symbol is formed by a sequence of dots and dashes. The dot duration \r\n                  is the basic unit of time measurement in Morse code transmission. The duration of a dash is three times the \r\n                  duration of a dot. Each dot or dash within a character is followed by period of signal absence, called a space, \r\n                  equal to the dot duration. The letters of a word are separated by a space of duration equal to three dots, and \r\n                  the words are separated by a space equal to seven dots.To increase the efficiency of encoding, Morse code was \r\n                  designed so that the length of each symbol is approximately inverse to the frequency of occurrence in text of the \r\n                  English language character that it represents. Thus the most common letter in English, the letter \"E\", has the \r\n                  shortest code: a single dot. Because the Morse code elements are specified by proportion rather than specific \r\n                  time durations, the code is usually transmitted at the highest rate that the receiver is capable of decoding. The\r\n                  Morse code transmission rate (speed) is specified in groups per minute, commonly referred to as words per minute.\r\n                </p>\r\n                <a href=\"https://en.wikipedia.org/wiki/Morse_code\" target=\"blank\">Morse Code Wikipedia</a>\r\n              </Typography>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel> \r\n      } \r\n  } else if(method === 'replace') {\r\n      if(direction === 'crack') {\r\n        expText = \r\n        <div className=\"controller explanation\">\r\n          <p className=\"block_method_explanation\">\r\n            No Crack function yet  :(\r\n          </p>\r\n        </div>\r\n      } else {\r\n        expText = \r\n          <ExpansionPanel>\r\n            <ExpansionPanelSummary\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel2a-content\"\r\n              id=\"panel2a-header\"\r\n            >\r\n              <Typography className={classes.heading}>More Details</Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n              <Typography className={classes.body}>\r\n                <p>\r\n                  This function will replace any given letter/sign in a text with another character.\r\n                </p>\r\n              </Typography>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel> \r\n      } \r\n  } else if(method === 'skytale') {\r\n    if(direction === 'crack') {\r\n      expText = \r\n      <div className=\"controller explanation\">\r\n        <p className=\"block_method_explanation\">\r\n          No Crack function yet  :(\r\n        </p>\r\n        <a href=\"https://en.wikipedia.org/wiki/Scytale\" target=\"blank\">Skytale Wikipedia</a>\r\n      </div>\r\n    } else {\r\n      expText =    \r\n        <ExpansionPanel>\r\n          <ExpansionPanelSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-controls=\"panel2a-content\"\r\n            id=\"panel2a-header\"\r\n          >\r\n            <Typography className={classes.heading}>More Details</Typography>\r\n          </ExpansionPanelSummary>\r\n          <ExpansionPanelDetails>\r\n            <Typography className={classes.body}>\r\n              <p>\r\n                In cryptography, a scytale is a tool used to perform a transposition cipher, consisting of a \r\n                cylinder with a strip of parchment wound around it on which is written a message. The ancient \r\n                Greeks, and the Spartans in particular, are said to have used this cipher to communicate during \r\n                military campaigns.\r\n      \r\n                The recipient uses a rod of the same diameter on which the parchment is wrapped to read the message. \r\n                It has the advantage of being fast and not prone to mistakes—a necessary property when on the \r\n                battlefield. It can, however, be easily broken. Since the strip of parchment hints strongly at the \r\n                method, the ciphertext would have to be transferred to something less suggestive, somewhat reducing \r\n                the advantage noted.\r\n              </p>\r\n              <a href=\"https://en.wikipedia.org/wiki/Scytale\" target=\"blank\">Skytale Wikipedia</a>\r\n            </Typography>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>  \r\n    } \r\n  } else if(method === 'otp') {\r\n    if(direction === 'crack') {\r\n      expText = \r\n      <div className=\"controller explanation\">\r\n        <p className=\"block_method_explanation\">\r\n          No Crack function yet  :(\r\n        </p>\r\n        <a href=\"https://en.wikipedia.org/wiki/One-time_pad\" target=\"blank\">One Time Pad</a>\r\n      </div>\r\n    } else {\r\n      expText =    \r\n        <ExpansionPanel>\r\n          <ExpansionPanelSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-controls=\"panel2a-content\"\r\n            id=\"panel2a-header\"\r\n          >\r\n            <Typography className={classes.heading}>More Details</Typography>\r\n          </ExpansionPanelSummary>\r\n          <ExpansionPanelDetails>\r\n            <Typography className={classes.body}>\r\n              <p>\r\n                In cryptography, the one-time pad (OTP) is an encryption technique that cannot be cracked, \r\n                but requires the use of a one-time pre-shared key the same size as, or longer than, the message \r\n                being sent. In this technique, a plaintext is paired with a random secret key (also referred \r\n                to as a one-time pad). Then, each bit or character of the plaintext is encrypted by combining \r\n                it with the corresponding bit or character from the pad using modular addition. If the key \r\n                is truly random, at least as long as the plaintext, never reused in whole or in \r\n                part, and kept completely secret, then the resulting ciphertext will be impossible to \r\n                decrypt or break. It has also been proven that any cipher with the property of perfect \r\n                secrecy must use keys with effectively the same requirements as OTP keys. Digital versions \r\n                of one-time pad ciphers have been used by nations for critical diplomatic and military \r\n                communication, but the problems of secure key distribution have made them impractical for \r\n                most applications.\r\n              </p>\r\n              <a href=\"https://en.wikipedia.org/wiki/One-time_pad\" target=\"blank\">One Time Pad</a>\r\n            </Typography>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>   \r\n    } \r\n  } else if(method === 'rsa') {\r\n    if(direction === 'crack') {\r\n      expText = \r\n      <div className=\"controller explanation\">\r\n        <p className=\"block_method_explanation\">\r\n          No Crack function yet  :(\r\n        </p>\r\n        <a href=\"https://en.wikipedia.org/wiki/One-time_pad\" target=\"blank\">One Time Pad</a>\r\n      </div>\r\n    } else {\r\n      expText =    \r\n        <ExpansionPanel>\r\n          <ExpansionPanelSummary\r\n            expandIcon={<ExpandMoreIcon />}\r\n            aria-controls=\"panel2a-content\"\r\n            id=\"panel2a-header\"\r\n          >\r\n            <Typography className={classes.heading}>More Details</Typography>\r\n          </ExpansionPanelSummary>\r\n          <ExpansionPanelDetails>\r\n            <Typography className={classes.body}>\r\n              <p>\r\n              RSA (Rivest–Shamir–Adleman) is one of the first public-key cryptosystems and is widely used for secure data \r\n              transmission. In such a cryptosystem, the encryption key is public and distinct from the decryption key which \r\n              is kept secret (private). In RSA, this asymmetry is based on the practical difficulty of factoring the product \r\n              of two large prime numbers, the \"factoring problem\". The acronym RSA is the initial letters of the surnames of \r\n              Ron Rivest, Adi Shamir, and Leonard Adleman, who publicly described the algorithm in 1977. Clifford Cocks, an \r\n              English mathematician working for the British intelligence agency Government Communications Headquarters (GCHQ), \r\n              had developed an equivalent system in 1973, which was not declassified until 1997.\r\n              </p>\r\n              <a href=\"https://en.wikipedia.org/wiki/One-time_pad\" target=\"blank\">One Time Pad</a>\r\n            </Typography>\r\n          </ExpansionPanelDetails>\r\n        </ExpansionPanel>   \r\n    } \r\n  }\r\n  return expText ? expText : null;\r\n}\r\n\r\nexport default ExplanatoryText\r\n\r\n\r\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 =\n/*#__PURE__*/\nReact.createElement(\"polygon\", {\n  points: \"0,96.879 193.129,289.379 386.257,96.879 \"\n});\n\nvar SvgCaret = function SvgCaret(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return React.createElement(\"svg\", _extends({\n    id: \"caret\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 386.257 386.257\",\n    style: {\n      enableBackground: \"new 0 0 386.257 386.257\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef\n  }, props), title ? React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return React.createElement(SvgCaret, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/caret.2961acbb.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react'\r\nimport { ReactComponent as Caret} from './img/caret.svg'\r\n\r\nconst BlockHeadSettings = ({switchModal, methodNameInset, changeDirection}) => {\r\n\r\n    const switchClassName = (evt) => {\r\n        const buttons = document.getElementsByClassName('block_head_option')\r\n        for(let button of buttons) {\r\n            if(evt.target === button) {\r\n                button.className = 'block_head_option selected'\r\n            } else {\r\n                button.className = 'block_head_option'\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"block_head\">\r\n            <button \r\n                className=\"block_head_text\" \r\n                id=\"block_head_modal\"\r\n                onClick = {switchModal}\r\n            >  \r\n                {methodNameInset} <Caret />\r\n            </button>\r\n            <div className=\"block_head_options\">\r\n                <button \r\n                    value='encrypt' \r\n                    onClick={(evt) => {\r\n                        changeDirection(evt)\r\n                        switchClassName(evt)\r\n                    }} \r\n                    className=\"block_head_option selected\"\r\n                >\r\n                    Encrypt\r\n                </button>\r\n                    <button \r\n                    value='decrypt' \r\n                    onClick={(evt) => {\r\n                        changeDirection(evt)\r\n                        switchClassName(evt)\r\n                    }} \r\n                    className=\"block_head_option\"\r\n                >\r\n                    Decrypt\r\n                </button>\r\n                <button \r\n                    value='crack' \r\n                    onClick={(evt) => {\r\n                        changeDirection(evt)\r\n                        switchClassName(evt)\r\n                    }} \r\n                    className=\"block_head_option\"\r\n                >\r\n                    Crack\r\n                </button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlockHeadSettings","import React from 'react'\r\n\r\nconst CaesarShift = ({plusMinus, cShift}) => {\r\n  return (\r\n    <div className=\"controller\">\r\n      <div className=\"settings_name\">SHIFT</div>\r\n      <div className=\"settings_operators\">\r\n          <div \r\n            value = '-'\r\n            id=\"minus_caesar\"\r\n            className=\"settings_operator\" \r\n            onClick={(evt) => {\r\n              plusMinus(evt)\r\n            }}\r\n          >\r\n          -\r\n          </div>\r\n          <div \r\n            className=\"settings_operator\" \r\n            id=\"caesar_shift_value\"\r\n          >\r\n          {cShift}\r\n          </div>\r\n          <div \r\n            value=\"+\"\r\n            id=\"plus_caesar\"\r\n            className=\"settings_operator\" \r\n            onClick={(evt) => {\r\n              plusMinus(evt)\r\n            }}\r\n          >\r\n          +\r\n          </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CaesarShift\r\n","import React from 'react'\r\n\r\nconst Alphabet = ({alphabet, alphabetUpdate, alphabetActive}) => {\r\n  return (\r\n    <div className=\"controller\">\r\n      <div className=\"settings_name\">Alphabet</div>\r\n      <div className=\"settings_operators\">\r\n          <textarea style={{boxShadow: 'none'}}\r\n            id=\"alphabet\" \r\n            value={alphabet}\r\n            readOnly = {!alphabetActive}\r\n            onChange = {(evt) => {\r\n              alphabetUpdate(evt)  \r\n            }}\r\n          />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alphabet\r\n","import React from 'react'\r\n\r\nclass CaseChars extends React.PureComponent {\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n            include: true,\r\n            ignore: false\r\n        }\r\n        this.changeClass = this.changeClass.bind(this)\r\n    }\r\n\r\n    changeClass(evt) {\r\n        if(evt.target.value === 'include') {\r\n            this.setState({\r\n                include: true,\r\n                ignore: false\r\n            })\r\n        } else {\r\n            this.setState({\r\n                include: false,\r\n                ignore: true\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"controller double_content\">\r\n                <div className=\"controllbox\">\r\n                    <div className=\"settings_name\">CASE</div>\r\n                    <div className=\"settings_operators\" style={{padding: '0.5rem 0.5rem 0.5rem 20px'}}>\r\n                        <select \r\n                            id=\"selectCase\" \r\n                            defaultValue = 'maintain' \r\n                            onChange = {(evt) => {\r\n                                this.props.selectCase(evt)\r\n                            }}\r\n                        >\r\n                            <option value=\"maintain\" style={{color: 'black', fontSize: '14px'}}>Maintain Case</option>\r\n                            <option value=\"ignore\" style={{color: 'black', fontSize: '14px'}}>Ignore Case</option>\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <div className=\"controllbox\" style={{borderRight: 'none'}}>\r\n                    <div className=\"settings_name\">FOREIGN CHARS</div>\r\n                    <div className=\"settings_operators\">\r\n                        <button \r\n                            id=\"includeChars\" \r\n                            className={this.state.include ? 'active' : 'inactive'} \r\n                            onClick = {(evt) => {\r\n                                this.props.includeChars(evt)\r\n                                this.changeClass(evt)\r\n                            }} \r\n                            value=\"include\">\r\n                            Include\r\n                        </button>\r\n                        <button \r\n                            id=\"ignoreChars\" \r\n                            className={this.state.ignore ? 'active' : 'inactive'} \r\n                            onClick = {(evt) => {\r\n                                this.props.includeChars(evt)\r\n                                this.changeClass(evt)\r\n                            }} \r\n                            value=\"ignore\">\r\n                            Ignore\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CaseChars\r\n","import React from 'react'\r\n\r\nconst Alpha = ({setAlpha, setBeta}) => {\r\n    return (\r\n        <div className=\"controller double_content\">\r\n            <div className=\"controllbox\">\r\n                <div className=\"settings_name\" style={{textTransform: 'none'}}>α</div>\r\n                <div className=\"settings_operators\">\r\n                    <select \r\n                        defaultValue=\"5\" \r\n                        className=\"affine\"\r\n                        onChange = {(evt) => {\r\n                            setAlpha(evt)\r\n                        }}\r\n                    >\r\n                        <option value=\"1\">1</option>\r\n                        <option value=\"3\">3</option>\r\n                        <option value=\"5\">5</option>\r\n                        <option value=\"7\">7</option>\r\n                        <option value=\"9\">9</option>\r\n                        <option value=\"11\">11</option>\r\n                        <option value=\"15\">15</option>\r\n                        <option value=\"17\">17</option>\r\n                        <option value=\"19\">19</option>\r\n                        <option value=\"21\">21</option>\r\n                        <option value=\"23\">23</option>\r\n                        <option value=\"25\">25</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n            <div className=\"controllbox\">\r\n                <div className=\"settings_name\" style={{textTransform: 'none'}}>β</div>\r\n                <div className=\"settings_operators\">\r\n                    <select \r\n                        defaultValue=\"1\" \r\n                        className=\"affine\"\r\n                        onChange = {(evt) => {\r\n                            setBeta(evt)\r\n                        }}\r\n                    >\r\n                        <option value=\"1\">1</option>\r\n                        <option value=\"2\">2</option>\r\n                        <option value=\"3\">3</option>\r\n                        <option value=\"4\">4</option>\r\n                        <option value=\"5\">5</option>\r\n                        <option value=\"6\">6</option>\r\n                        <option value=\"7\">7</option>\r\n                        <option value=\"8\">8</option>\r\n                        <option value=\"9\">9</option>\r\n                        <option value=\"10\">10</option>\r\n                        <option value=\"11\">11</option>\r\n                        <option value=\"12\">12</option>\r\n                        <option value=\"13\">13</option>\r\n                        <option value=\"14\">14</option>\r\n                        <option value=\"15\">15</option>\r\n                        <option value=\"16\">16</option>\r\n                        <option value=\"17\">17</option>\r\n                        <option value=\"18\">18</option>\r\n                        <option value=\"19\">19</option>\r\n                        <option value=\"20\">20</option>\r\n                        <option value=\"21\">21</option>\r\n                        <option value=\"22\">22</option>\r\n                        <option value=\"23\">23</option>\r\n                        <option value=\"24\">24</option>\r\n                        <option value=\"25\">25</option>\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alpha\r\n","import React from 'react'\r\n\r\nconst KeywordVigenere = ({keyword, updateKeyword}) => {\r\n  return (\r\n    <div className=\"controller\">\r\n      <div className=\"settings_name\"\r\n      >\r\n      Keyword\r\n      </div>\r\n      <div className=\"settings_operators\">\r\n          <textarea style={{boxShadow: 'none'}}\r\n            id=\"alphabet\" \r\n            defaultValue={keyword} \r\n            onChange = {(evt) => {\r\n                updateKeyword(evt)\r\n            }}\r\n          />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default KeywordVigenere\r\n","import React from 'react'\r\n\r\nconst KeywordPlayfair = ({keyword, updateKeyword}) => {\r\n  \r\n  return (\r\n    <div className=\"controller\">\r\n      <div className=\"settings_name\">Keyword</div>\r\n      <div className=\"settings_operators\">\r\n          <textarea \r\n            id=\"alphabet\" \r\n            defaultValue={keyword} \r\n            onChange = {(evt) => {\r\n                updateKeyword(evt)\r\n            }}\r\n            style={{boxShadow:'none'}}\r\n          />\r\n      </div>\r\n      <div id=\"matrix\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default KeywordPlayfair\r\n","import React from 'react'\r\n\r\nconst CharOptions = ({setAlpha, setBeta, encrypt}) => {\r\n    return (\r\n        <div className=\"controller double_content\">\r\n            <div className=\"controllbox\">\r\n                <div className=\"settings_name\">Letter to leave out</div>\r\n                <div className=\"settings_operators\">\r\n                    <div className=\"char-left-out\">J</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"controllbox\">\r\n                <div className=\"settings_name\">Substitution letter</div>\r\n                <div className=\"settings_operators\">\r\n                    <div className=\"char-left-out\">X</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharOptions\r\n","import React from 'react'\r\n\r\n\r\nclass PlayfaireSquare extends React.PureComponent {\r\n\r\n    createVisualMatrix = () => {\r\n        let parent = []\r\n        let children = []\r\n        for(let i = 0; i < 25; i++) {\r\n            let ID = 'table' + i;\r\n            children.push(\r\n                <div    key={ID} \r\n                        id={ID} \r\n                        className=\"playfairTable\"\r\n                    >\r\n                        {this.props.playSquare[i]}\r\n                </div>\r\n            )\r\n        }\r\n        parent.push(\r\n            <div id=\"visualMatrix\" style={{boxShadow:'none'}} className=\"controller\">{children}</div>\r\n        )\r\n        return parent\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"controller\" style={{boxShadow: 'inset 0 10px 10px -10px #00000030'}}>\r\n                <div className=\"settings_name\">PLAYFAIR SQUARE</div>\r\n                <div className=\"settings_operators\">\r\n                    {this.createVisualMatrix()}\r\n                </div>\r\n                <div id=\"skytale_explanatory_text\">\r\n                    <p className=\"feature_text\"> \r\n                        This method is a bit shaky encrypting forth and back. One letter is\r\n                        left out and substituted with another letter - either not use this letter or\r\n                        at least be aware that there might be inconsistencies. A substitution letter will \r\n                        be added if two of the same letters occure directly after each other (if the first letter \r\n                        is on an even index). Change the '<b>j</b>' in the default input message to an '<b>i</b>' \r\n                        for a better encryption result.\r\n                    </p>\r\n                </div>    \r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default PlayfaireSquare\r\n","import React from 'react'\r\n\r\nconst Replace = ({setReplaceLetters, toReplaceLetter, replaceLetter}) => {\r\n    return (\r\n        <div className=\"controller double_content\">\r\n            <div className=\"controllbox\">\r\n                <div className=\"settings_name\">REPLACE</div>\r\n                <div className=\"settings_operators\">\r\n                    <textarea \r\n                        defaultValue={toReplaceLetter}\r\n                        onChange={(evt) => {\r\n                            setReplaceLetters(evt)\r\n                        }}\r\n                        id=\"to_replace_letter\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"controllbox\">\r\n                <div className=\"settings_name\">REPLACE WITH</div>\r\n                <div className=\"settings_operators\">\r\n                    <textarea \r\n                        defaultValue={replaceLetter}\r\n                        onChange={(evt) => {\r\n                            setReplaceLetters(evt)\r\n                        }}\r\n                        id=\"replacement_letter\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Replace\r\n","import React from 'react'\r\n\r\nconst RingLength = ({plusMinus, ringLength}) => {\r\n  return (\r\n    <div className=\"controller\">\r\n      <div className=\"settings_name\">RING SEGMENTS</div>\r\n      <div className=\"settings_operators\">\r\n          <div \r\n            value = '-'\r\n            className=\"settings_operator\" \r\n            id=\"minus_ring\"\r\n            onClick={(evt) => {\r\n              plusMinus(evt)\r\n            }}\r\n          >\r\n          -\r\n          </div>\r\n          <div \r\n            className=\"settings_operator\" \r\n            id=\"caesar_shift_value\"\r\n          >\r\n          {ringLength}\r\n          </div>\r\n          <div \r\n            value=\"+\"\r\n            id=\"plus_ring\"\r\n            className=\"settings_operator\" \r\n            onClick={(evt) => {\r\n              plusMinus(evt)\r\n            }}\r\n          >\r\n          +\r\n          </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RingLength\r\n","import React from 'react'\r\n\r\n\r\nclass Rings extends React.PureComponent {\r\n\r\n    generateRingStyles(planeNumber, character, ringNumber) {\r\n        \r\n        let firstCharacterStyle = ''\r\n        if(planeNumber === 0 && ringNumber === 0){ \r\n            firstCharacterStyle = '#ff586e'\r\n        }\r\n\r\n        // No value ? no background\r\n        let transparencyValue = !character ? 'transparent' : ''\r\n\r\n        // Calculates the arc radius with one piece width = 30px\r\n        // Could scale bud didn't make sense yet\r\n        let d = (30 / Math.PI) / (360 / this.props.ringLength / 360) / 2 - 5\r\n\r\n        //rotateValue according to the piece of plane that will be rotated\r\n        let rotateValue = 360 / this.props.ringLength + (planeNumber * 360 / this.props.ringLength) - 360 / this.props.ringLength\r\n\r\n        let ringStyles =    { \r\n                                WebkitTransform: `rotateY(${rotateValue}deg) translateZ(${d}px)`,\r\n\r\n                                backgroundColor: firstCharacterStyle !== '' ? firstCharacterStyle : transparencyValue\r\n                            }\r\n        return ringStyles\r\n    }\r\n\r\n    generateOneRingElement(indexOfCharacter, character, ringNumber) {\r\n\r\n        // classes just for react key value\r\n        let classes = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen',\r\n                        'nineteen', 'twenty']\r\n        let div =   <div  \r\n                        key={classes[indexOfCharacter] + character}\r\n                        className={'plane ' + classes[indexOfCharacter]}\r\n                        style={this.generateRingStyles(indexOfCharacter, character, ringNumber)}\r\n                    >\r\n                    {character}\r\n                    </div>\r\n        return div\r\n    }\r\n\r\n    generateAllRingElements(ringNumber) {\r\n        let parent = []\r\n        for(let i = 0; i < this.props.ringLength; i++) {\r\n            \r\n            // Loops throug the encrypted output and puts the generated ring element into the parent\r\n            // The ring number accounts for the output[i] value used so every ring has the right letters\r\n            parent.push(this.generateOneRingElement(i, this.props.outputValue[i + (ringNumber * this.props.ringLength)], ringNumber))\r\n        }\r\n        return parent\r\n    }\r\n\r\n    generateAllRings() {\r\n        let parent = []\r\n        for(let i = 0; i < this.props.skytaleLength; i++) {\r\n            let ringNumber = i\r\n            parent.push(\r\n                <div key={i + 'ring'} className=\"shape ring\">{this.generateAllRingElements(ringNumber)}</div>\r\n            )\r\n        }\r\n        return parent\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"controller\">\r\n                <div className=\"settings_name\">SKYTALE</div>\r\n                <div className=\"settings_operators\" style={{display: 'flex', flexDirection: 'column', alignItems:'center', justifyContent: 'center'}}>\r\n                    <div id=\"ring_container\">\r\n                        <div \r\n                            id=\"turntable\"\r\n                            style={{height: `${this.props.skytaleLength * 25}px`}}\r\n                        >\r\n                            {this.generateAllRings()}\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"skytale_explanatory_text\">\r\n                        <p className=\"feature_text\"> \r\n                            You can only see a readable alignment of letters (top to bottom, left to right) if you are <b>encrypting\r\n                            a cleartext</b> or <b>decrypting an encrypted text</b>. The ring-segment-count needs to stay\r\n                            exactly the same for both directions. The first letter of your message is marked in&nbsp;\r\n                            <span style={{ backgroundColor: '#ff586e', \r\n                                        display: 'inline-block', \r\n                                        padding: '0px 3px', \r\n                                        color: 'white', \r\n                                        fontWeight: 'bold',\r\n                                        fontStyle: 'normal', \r\n                                        lineHeight: '1.2'}}\r\n                            >\r\n                            red\r\n                            </span>\r\n                        </p>\r\n                    </div>    \r\n                </div>\r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default Rings\r\n","import React from 'react'\r\n\r\n\r\nclass CaesarTransposition extends React.PureComponent {\r\n\r\n    genAlphabet = () => {\r\n        if(this.props.alphabet.length === 0) return\r\n\r\n        let style = {color: '#3daae9'}\r\n        let keys = ['iBka','DB5u','JyVA','1TJs','FUAf','rM2k','TVla',\r\n                    '9b3r','Dk8g','byB9','LoZ8','ayjb','8Cbx','lv5i',\r\n                    '6z4q','5nDP','yUsd','2egr','8QXH','pBHv','TJBV',\r\n                    'wJnj','DmXo','JXzT','bKqo','cloo']\r\n\r\n        let alphabet = this.props.alphabet.toLowerCase().split('').sort()\r\n        alphabet = [...new Set(alphabet)]\r\n\r\n        let output = []\r\n        let counter = 0;\r\n        for(let element of alphabet) {\r\n            output.push(\r\n                <div className=\"alphabet_transpos\" key={keys[counter]} style={element.toLowerCase() === 'a' ? style : {color: 'rgba(255, 255, 255, 0.627)'}}>\r\n                <div>{element}</div><div className= {element.toLowerCase() === 'a' ? '' : 'arrow'}>↓</div></div>\r\n            )\r\n            counter++\r\n        }\r\n        return output\r\n    }\r\n\r\n    genShifted = (shift) => {\r\n\r\n        if(this.props.alphabet.length === 0) return\r\n\r\n        let style = {color: '#3daae9'}\r\n        let keys = ['iBtka','DB5uD','JyVDA','1lTJs','FU7Af','rnM2k','TVlka',\r\n                    '96b3r','DkU8g','byBW9','LoLZ8','cayjb','8CTbx','lhv5i',\r\n                    '6zT4q','5nDWP','yUsXd','2regr','8MQXH','pIBHv','T7JBV',\r\n                    'wJrnj','Dm5Xo','JXnzT','bKMqo','clXoo']\r\n        \r\n        let alphabet = this.props.alphabet.toLowerCase().split('').sort()\r\n        alphabet = [...new Set(alphabet)]\r\n        \r\n        for(let i = 0; i < shift; i++) {\r\n            let temp = alphabet.shift()\r\n            alphabet.push(temp)\r\n        }\r\n        let output = []\r\n        for(let i = 0; i < alphabet.length; i++) {\r\n            output.push(\r\n                <div    className=\"alphabet_transpos\" \r\n                        key={keys[i]} \r\n                        style={alphabet[i].toLowerCase() === 'a' ? style : {color: 'rgba(255, 255, 255, 0.627)'}}\r\n                >\r\n                <div  className= {alphabet[i].toLowerCase() === 'a' ? '' : 'arrow'}>↑</div><div>{alphabet[i]}</div>\r\n                </div>    \r\n            )\r\n        }\r\n\r\n        return output\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"controller\">\r\n                <div className=\"settings_name\">Caesar Cipher Transposition</div>\r\n                <div id=\"caesar_transposition\">\r\n                    <div className=\"alphabet_row_collect\">\r\n                        <div id=\"alphabet_standart\">{this.genAlphabet()}</div>\r\n                        <div id=\"alphabet_transpositioned\">{this.genShifted(this.props.cShift)}</div>\r\n                    </div>\r\n                </div>    \r\n                <div id=\"caesar_explanatory_text\">\r\n                    <p className=\"feature_text\"> \r\n                        Visualization of the character mapping on <b>shift</b> changes.\r\n                    </p>\r\n                </div>    \r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default CaesarTransposition\r\n","import React from 'react'\r\n\r\n\r\nclass AtbashTransposition extends React.PureComponent {\r\n    genAlphabet = (reverse) => {\r\n        if(this.props.alphabet.length === 0) return\r\n\r\n        let style = {color: '#ffffff'}\r\n        let keys = ['iBk','DB5','JyV','1Ts','FUf','rMk','TVa',\r\n                    '9b3','Dk8','byB','Lo8','ayb','8Cx','lv5',\r\n                    '6z4','5nD','yUs','2er','8QH','BHv','TJV',\r\n                    'wJn','DmX','JXz','bKq','coo']\r\n\r\n        let alphabet = this.props.alphabet.toLowerCase().split('').sort()\r\n        alphabet = reverse ? [...new Set(alphabet)].reverse() : [...new Set(alphabet)]\r\n\r\n        \r\n        let output = []\r\n        let counter = 0\r\n\r\n        for(let element of alphabet) {\r\n            output.push(\r\n                <div    className=\"alphabet_transpos\" \r\n                        key={keys[counter]} \r\n                        style={element.toLowerCase() === 'a' || element.toLowerCase() === 'z' ? style : {color: '#ffffffa0'}}\r\n                >\r\n                    <div className={reverse ? \"arrow\" : ''}>\r\n                        {reverse ? '↑' : element}\r\n                    </div>\r\n                    <div className={reverse ? \"\" : 'arrow'}>\r\n                        {reverse ? element : '↓'}\r\n                    </div>\r\n                </div>\r\n            )\r\n            counter++\r\n        }\r\n        return output\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"controller\">\r\n                <div className=\"settings_name\">Atbash Cipher Transposition</div>\r\n                <div id=\"caesar_transposition\">\r\n                    <div className=\"alphabet_row_collect\">\r\n                        <div id=\"alphabet_standart\">{this.genAlphabet(false)}</div>\r\n                        <div id=\"alphabet_transpositioned\">{this.genAlphabet(true)}</div>\r\n                    </div>\r\n                </div>    \r\n                <div id=\"caesar_explanatory_text\">\r\n                    <p className=\"feature_text\"> \r\n                        Visualization of the mirror-like character mapping of the atbash cipher. The cipher is very easy to break as the letter \r\n                        mapping always stays the same. The encryption- decryption- and cracking algorithm are exactly the same. Have a \r\n                        look at the frequency analysis graphs on both sides to see the mirror effect.\r\n                    </p>\r\n                </div>    \r\n            </div> \r\n        )\r\n    }\r\n}\r\n\r\nexport default AtbashTransposition\r\n","import React from 'react'\r\n\r\nconst Otp = ({genRandomKey, otpKey}) => {\r\n\r\n    return (\r\n        <div className=\"controller\">\r\n            <div className=\"settings_name\">GENERATE RANDOM KEY</div>\r\n            <div className=\"settings_operators\" id=\"genRandomTab\">\r\n                <div \r\n                    className=\"settings_operator\" \r\n                    id=\"otpKey\"\r\n                >\r\n                    {otpKey}\r\n                </div>\r\n                <button \r\n                    id=\"generate\"\r\n                    className=\"settings_operator\" \r\n                    onClick={() => {\r\n                        genRandomKey()\r\n                    }}\r\n                >\r\n                    Generate new random key\r\n                </button>\r\n                <div id=\"caesar_explanatory_text\">\r\n                    <p className=\"feature_text\"> \r\n                        For the purpose of trying out de- and encryption with the same key, the key will not\r\n                        update when your input message updates.\r\n                    </p>\r\n                </div>    \r\n            </div>\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default Otp\r\n","const math = (() => {\r\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz'\r\n\r\n    //Get rid of everything besides pure characters\r\n    //Return lowercase string\r\n    const modInverse = (a, b) => {\r\n        a %= b;\r\n        for (var x = 1; x < b; x++) {\r\n            if ((a * x) % b === 1) {\r\n                return x;\r\n            }\r\n        }\r\n    }\r\n\r\n    const cleanInput = (input, blankSpaces, caseSensitive, alphab) => {\r\n        if(!input || input.length === 0) return null\r\n        const inputArr = input.toLowerCase().split('')\r\n        \r\n        if(!alphab) alphab = alphabet;\r\n\r\n        let cleanOutput\r\n\r\n        if(blankSpaces) {\r\n            if(caseSensitive) {\r\n                cleanOutput = input.split('').filter(char => alphab.indexOf(char.toLowerCase()) !== -1 || char === ' ')\r\n            }\r\n            else if(caseSensitive === false) {\r\n                cleanOutput = inputArr.filter(char => alphab.indexOf(char) !== -1 || char === ' ')      \r\n            }\r\n        } \r\n        else if(blankSpaces === false) {\r\n            if(caseSensitive) {\r\n                cleanOutput = input.split('').filter(char => alphab.indexOf(char.toLowerCase()) !== -1)\r\n            }\r\n            else if(caseSensitive === false) {\r\n                cleanOutput = inputArr.filter(char => alphab.indexOf(char) !== -1)    \r\n            }\r\n        }\r\n\r\n        return cleanOutput.join('')\r\n    }\r\n\r\n    //take raw input and lowercase/nosign- output\r\n    //return a string without signs but with correct case format\r\n\r\n    const restoreCase = (input, output) => {\r\n        input = input.split('')\r\n        output = output.split('')\r\n\r\n        let restoredCaseArr = []\r\n        \r\n\r\n        for(let i = 0; i < input.length; i++) {\r\n            if(output[i] && input[i]) {\r\n                input[i].toLowerCase() === input[i] ? restoredCaseArr.push(output[i].toLowerCase()) : restoredCaseArr.push(output[i].toUpperCase())     \r\n            }\r\n        }\r\n\r\n        return restoredCaseArr.join('')\r\n    }\r\n\r\n    // take raw input and casesensitive output\r\n    // return a string with signs and correct case format and blank spaces\r\n\r\n    const restoreForeignChars = (input, output) => {\r\n        input = String(input)\r\n        output = String(output)\r\n\r\n        let index = 0;\r\n        let restoredForeignCharsArr = []\r\n\r\n        for(let character of input) {\r\n            if(alphabet.indexOf(character.toLowerCase()) !== -1) {\r\n                restoredForeignCharsArr.push(output[index])\r\n                index++\r\n            }\r\n            else if(alphabet.indexOf(character.toLowerCase()) === -1) {\r\n                restoredForeignCharsArr.push(character)\r\n            }\r\n        }\r\n        \r\n        return restoredForeignCharsArr.join('')\r\n    }\r\n\r\n\r\n    const transformCaseAndChars = (userInput, rawOutput, caseFormat, includeChars) => {\r\n\r\n        let cleanOutput\r\n\r\n        if(caseFormat === 'maintain') {\r\n            if(includeChars === 'include') {\r\n                cleanOutput = math.restoreForeignChars(userInput, rawOutput)\r\n                cleanOutput = math.restoreCase(userInput, cleanOutput)\r\n                return cleanOutput\r\n            }\r\n            else if(includeChars === 'ignore') {\r\n                cleanOutput = math.restoreForeignChars(userInput, rawOutput)\r\n                cleanOutput = math.restoreCase(userInput, cleanOutput)\r\n                cleanOutput = math.cleanInput(cleanOutput, true, true)\r\n                return cleanOutput\r\n            }\r\n        }\r\n        else if(caseFormat === 'ignore') {\r\n            if(includeChars === 'include') {\r\n                cleanOutput = math.restoreForeignChars(userInput, rawOutput)\r\n                cleanOutput = math.restoreCase(userInput, cleanOutput)\r\n                return cleanOutput.toLowerCase()\r\n            }\r\n            else if(includeChars === 'ignore') {\r\n                cleanOutput = math.restoreForeignChars(userInput, rawOutput)\r\n                cleanOutput = math.restoreCase(userInput, cleanOutput)\r\n                cleanOutput = math.cleanInput(cleanOutput, true, true)\r\n                return cleanOutput.toLowerCase()\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        transformCaseAndChars: transformCaseAndChars,\r\n        cleanInput: cleanInput,\r\n        restoreCase: restoreCase,\r\n        restoreForeignChars: restoreForeignChars,\r\n        modInverse: modInverse\r\n    }\r\n})();\r\n\r\nexport default math;","import math from '../math/Math'\r\nimport Alphabet from '../general/Alphabet';\r\nconst bigintModArith = require('bigint-mod-arith');\r\n/* global BigInt */\r\n\r\n//reading\r\n//https://www.di-mgt.com.au/rsa_alg.html\r\n//https://www.thedigitalcatonline.com/blog/2018/04/25/rsa-keys/\r\n//https://primes.utm.edu/lists/small/small.html\r\n\r\n\r\nconst rsa = (() => {\r\n\r\n    let prime_one, prime_two, e, phi, userInput, n, d\r\n\r\n\r\n    const setPrimeOne = (val) => {\r\n        prime_one = val\r\n    }\r\n\r\n    const setPrimeTwo = (val) => {\r\n        prime_two = val\r\n    }\r\n\r\n    const setE = (val) => {\r\n        e = val\r\n    }\r\n\r\n    const setUserInput = (val) => {\r\n        userInput = val\r\n    }\r\n\r\n    const textToHex = (input) => {\r\n        let hexArr = []\r\n        for(let i = 0; i < input.length; i++) {\r\n            let hexCode = Number(input.charCodeAt(i)).toString(16)\r\n            hexArr.push(hexCode)\r\n        }\r\n        return hexArr\r\n    }\r\n\r\n    const hexToDecimal = (input) => {\r\n        let decimalArr = []\r\n        for(let element of input) {\r\n            decimalArr.push(parseInt(element, 16))\r\n        }\r\n        return String(decimalArr.join(''))\r\n    }\r\n\r\n    const decimalToHex = (input) => {\r\n        let hexArr = []\r\n        for(let element of input) {\r\n            hexArr.push(element.toString(16))\r\n        }\r\n    }\r\n\r\n    const hexToText = (hex) => {\r\n        let textArr = []\r\n        for(let i = 0; i < hex.length; i++) {\r\n            let text = String.fromCharCode(parseInt(hex[i], 16))\r\n            textArr.push(text)\r\n        }\r\n        return textArr.join('')\r\n    }\r\n\r\n    const bigToNumber = (arr) => {\r\n        let numberArr = []\r\n        for(let element of arr) {\r\n            numberArr.push(Number(element.toString()))\r\n        }\r\n        return numberArr\r\n    }\r\n\r\n    const encrypt = () => {\r\n        var t0 = performance.now();\r\n\r\n        //First check if phi and e are coprime otherwise this is a waste of time.\r\n        let gcd = bigintModArith.gcd(BigInt(phi), BigInt(e))\r\n        if (gcd !== BigInt(1)) return '!!! φ(n) and e are not coprime - gcd of φ(n) and e is ' + gcd + ' Please check that you have two prime numbers and an appropriate e without a common gcd!!!'\r\n\r\n        if(!userInput || !e || !n) return\r\n        //Convert Input to Dezimal to get an encryptable number\r\n        let inputArr = userInput.split('')\r\n        let dezArr = []\r\n        for(let element of inputArr) {\r\n            dezArr.push(element.charCodeAt(0))\r\n        }\r\n        let longNumber = dezArr.join('')\r\n        //Encrypt the Number\r\n        let encryptedDEZ = bigintModArith.modPow(longNumber, e, n)\r\n\r\n\r\n        //let encryptedHEX = encryptedDEZ.toString(16)\r\n        var t1 = performance.now();\r\n\r\n        return [encryptedDEZ.toString(), ((t1 - t0) / 1000).toString() + 's']\r\n    }\r\n\r\n    const decrypt = () => {\r\n        var t0 = performance.now();\r\n\r\n        //Check if we are trying to decrypt a number\r\n        let alphabet = 'abcdefghijklmnopqrstuvwxyz'\r\n\r\n        for(let i = 0; i < userInput.length; i++) {\r\n            if(alphabet.indexOf(userInput[i]) !== -1) return `Please don't enter anything but a big number into the input field when you decrypt something.`\r\n        }\r\n\r\n        let decryptedDEZ = bigintModArith.modPow(userInput, d, n).toString()\r\n        let decryptedArr = []\r\n        let i = 0;\r\n        while(decryptedDEZ.length > 0) {\r\n            if(Number(String(decryptedDEZ[i]) + String(decryptedDEZ[i + 1]) + String(decryptedDEZ[i + 2])) <= 255) {\r\n                decryptedArr.push(Number(String(decryptedDEZ[i]) + String(decryptedDEZ[i + 1]) + String(decryptedDEZ[i + 2])))\r\n                decryptedDEZ = decryptedDEZ.slice(3)\r\n            }\r\n            else if(Number(String(decryptedDEZ[i]) + String(decryptedDEZ[i + 1])) <= 255) {\r\n                decryptedArr.push(Number(String(decryptedDEZ[i]) + String(decryptedDEZ[i + 1])))\r\n                decryptedDEZ = decryptedDEZ.slice(2)\r\n            }\r\n            else {\r\n                console.log(decryptedDEZ)\r\n                return\r\n            } \r\n        }\r\n        \r\n        let decryptedLetters = []\r\n        for(let i = 0; i < decryptedArr.length; i++) {\r\n            let char = String.fromCharCode(decryptedArr[i])\r\n            decryptedLetters.push(char)\r\n        }\r\n\r\n        var t1 = performance.now();\r\n\r\n        return [decryptedLetters.join(''), ((t1 - t0) / 1000).toString() + 's']\r\n    }\r\n\r\n    const calcPhi = () => {\r\n        let bigP1 = BigInt(prime_one)\r\n        let bigP2 = BigInt(prime_two)\r\n        let big1 = BigInt(1)\r\n        phi = ((bigP1 - big1) * (bigP2 - big1))\r\n        return phi.toString()\r\n      }\r\n    \r\n    const calcD = () => {\r\n\r\n        if(!e || !phi || e === null || phi === null) return\r\n        if(bigintModArith.modInv(e, phi) === null) return\r\n\r\n        d = BigInt(bigintModArith.modInv(e, phi)).toString()\r\n        return d\r\n    }\r\n\r\n    const calcN = () => {\r\n        n = BigInt(prime_one) * BigInt(prime_two)\r\n        return n.toString()\r\n    }\r\n\r\n    return {\r\n        encrypt: encrypt,\r\n        textToHex: textToHex,\r\n        hexToDecimal: hexToDecimal,\r\n        bigToNumber: bigToNumber,\r\n        decimalToHex: decimalToHex,\r\n        calcD: calcD,\r\n        calcPhi: calcPhi,\r\n        setPrimeOne: setPrimeOne,\r\n        setPrimeTwo: setPrimeTwo,\r\n        setE: setE,\r\n        calcN: calcN,\r\n        setUserInput: setUserInput,\r\n        decrypt: decrypt\r\n    }\r\n})()\r\n\r\nexport default rsa","import React from 'react'\r\nimport math from '../math/Math'\r\nimport rsa from './RSALogic'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\n\r\n\r\nconst Primes = (props) => {\r\n\r\n    const cleanPrime = (rawInput) => {\r\n        if(rawInput.length !== 0) {\r\n            let numbers = '0123456789'\r\n            let cleanInput = []\r\n            for(let element of rawInput) {\r\n                if(numbers.indexOf(element) !== -1) cleanInput.push(element)\r\n            }    \r\n            return cleanInput.join('')    \r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className = 'primes'>\r\n            <div className=\"controller double_content prime\">\r\n                <div className=\"controllbox\">\r\n                    <div className=\"settings_name\">Prime 1</div>\r\n                    <div className=\"settings_operators\">\r\n                        <textarea \r\n                            type=\"text\" \r\n                            id=\"prime_1\" \r\n                            name=\"tentacles\"\r\n                            style={{boxShadow: 'none'}}\r\n                            defaultValue={props.prime_one} \r\n                            onChange = {(e) => {\r\n                                let input = cleanPrime(e.target.value)\r\n                                props.setPrimeOne(input)\r\n                            }}\r\n                            >\r\n                        </textarea>\r\n                    </div>\r\n                </div>\r\n                <div className=\"controllbox\" style={{borderRight: 'none'}}>\r\n                    <div className=\"settings_name\">Prime 2</div>\r\n                    <div className=\"settings_operators\">\r\n                        <textarea \r\n                            type=\"text\" \r\n                            id=\"prime_2\" \r\n                            name=\"tentacles\"\r\n                            style={{boxShadow: 'none'}}\r\n                            defaultValue={props.prime_two} \r\n                            onChange = {(e) => {\r\n                                let input = cleanPrime(e.target.value)\r\n                                props.setPrimeTwo(input)\r\n                            }}\r\n                        >\r\n                        </textarea>\r\n                    </div>\r\n                </div>\r\n                <div className=\"controllbox\">\r\n                    <div className=\"settings_name\">e = PUBLIC KEY</div>\r\n                    <div className=\"settings_operators\">\r\n                        <textarea \r\n                            type=\"text\"\r\n                            id=\"exponent\" \r\n                            name=\"tentacles\"\r\n                            style={{boxShadow: 'none'}}\r\n                            onChange = {(e) => {\r\n                                props.setE(e)\r\n                            }}\r\n                        >{props.e}\r\n                        </textarea>\r\n                    </div>\r\n                </div>\r\n                <div className=\"controllbox\" style={{borderRight: 'none'}}>\r\n                    <div className=\"settings_name\">n = PUBLIC KEY</div>\r\n                    <div className=\"settings_operators\">\r\n                        <textarea style={{boxShadow: 'none'}} defaultValue={props.n} type=\"text\" id=\"prime_2\" name=\"tentacles\"></textarea>\r\n                    </div>\r\n                </div>\r\n                <div className=\"controllbox phi\">\r\n                    <div className=\"settings_name\">φ <i> = (Prime1 - 1) * (Prime2 - 1)</i></div>\r\n                    <div className=\"settings_operators\">\r\n                        <textarea style={{boxShadow: 'none'}} defaultValue={props.phi} type=\"text\" id=\"phi_number\" name=\"tentacles\"></textarea>\r\n                    </div>\r\n                </div>\r\n                <div className=\"controllbox\" style={{borderRight: 'none'}}>\r\n                    <div className=\"settings_name\">d <i> = (e ^ −1) mod ϕ</i></div>\r\n                    <div className=\"settings_operators\">\r\n                        <textarea style={{boxShadow: 'none'}} defaultValue={props.d} type=\"text\" id=\"d_calculated\" name=\"tentacles\"></textarea>\r\n                    </div>\r\n                </div>\r\n                <div className=\"controllbox\" style={{border: 'none', borderBottom: '1px solid #444444'}}>\r\n                    <div className=\"settings_name\">Time to calculate</div>\r\n                    <div className=\"settings_operators\">{props.timeToCalculate}</div>\r\n                </div>\r\n            </div>\r\n            <div className=\"caesar_explanatory_text\">\r\n                <div className=\"feature_text\">\r\n                    <p>\r\n                        To encrypt longer messages, use longer prime numbers from this site:&nbsp;\r\n                        <a href=\"https://primes.utm.edu/curios/page.php?number_id=3818\" target=\"blank\">primes.utm.edu</a><br></br>\r\n                        (spaces are automatically beeing removed from the input when you copy-paste). If your computer feels\r\n                        stuck for some seconds, that's because it's calculating.\r\n                    </p>\r\n                    <p>\r\n                        This site is using a <strong className=\"underline\">pure</strong> version of RSA. \r\n                        First every character is encoded to it's character-code equivalent. Then all character \r\n                        codes are joined together into a big number and the actual encryption takes place.\r\n                    </p>\r\n                    <p>\r\n                        For the decryption process the encrypted message is first decoded and is then ready to be converted \r\n                        back to it's character codes and original characters.\r\n                    </p>\r\n                    <p>\r\n                        A regular RSA algorithm is usually only used as a way to encrypt keys for symmetric\r\n                        encrytion algorithms like AES - it's a misconception, that the actual message is encrypted\r\n                        using RSA. There is also a padding scheme (OAEP) involved to obscure\r\n                        potentially insecure messages and make them harder to break. RSA is incredibly\r\n                        slow when used with longer messages/bigger prime numbers. <strong className=\"underline\">The longer the message that \r\n                        you want to encrypt, the more digits your prime numbers needs to have for the algorithm to work.</strong>        \r\n                    </p>\r\n                    \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )    \r\n}\r\n\r\n\r\n\r\nexport default Primes\r\n","import React from 'react'\r\nimport CaesarShift from '../caesar/CaesarShift'\r\nimport Alphabet from './Alphabet'\r\nimport CaseChars from './CaseChars'\r\nimport Alpha from '../affine/Alpha'\r\nimport KeywordVigenere from '../vigenere/KeywordVigenere'\r\nimport KeywordPlayfair from '../playfair/KeywordPlayfair'\r\nimport CharOptions from '../playfair/CharOptions'\r\nimport PlayfairSquare from '../playfair/PlayfairSquare'\r\nimport ReplaceKeys from '../replace/ReplaceKeys'\r\nimport RingLength from '../skytale/RingLenght'\r\nimport Rings from '../skytale/Rings'\r\nimport CaesarTransposition from '../caesar/CaesarTransposition'\r\nimport AtbashTransposition from '../atbash/AtbashTransposition'\r\nimport OtpGenerate from '../onetimepad/otpGenerate'\r\nimport Primes from '../rsa/Primes'\r\n\r\n\r\nconst BlockBodyInput = ({   cShift, \r\n                            caesarPlusMinus,\r\n                            skytalePlusMinus,\r\n                            alphabet, \r\n                            alphabetUpdate, \r\n                            selectCase, \r\n                            includeChars, \r\n                            method, \r\n                            direction, \r\n                            setAlpha, \r\n                            setBeta, \r\n                            updateKeyword,\r\n                            keyword,\r\n                            playSquare,\r\n                            setReplaceLetters,\r\n                            toReplaceLetter,\r\n                            replaceLetter,\r\n                            ringLength,\r\n                            skytaleLength,\r\n                            skytaleProjectedValue,\r\n                            alphabetActive,\r\n                            otpKey,\r\n                            genRandomKey,\r\n                            inputValue,\r\n                            setPrimeOne,\r\n                            setPrimeTwo,\r\n                            setE,\r\n                            e,\r\n                            prime_one,\r\n                            prime_two,\r\n                            phi,\r\n                            n,\r\n                            d,\r\n                            timeToCalculate\r\n                        }) => {\r\n    let bodyInput\r\n    const switchBodyInput = () => {\r\n        if (direction === 'crack') return null\r\n        switch (method) {\r\n            case 'atbash':\r\n                bodyInput =\r\n                    <div className=\"block_body_input\">\r\n                        <AtbashTransposition \r\n                            direction = {direction}\r\n                            alphabet = {alphabet}\r\n                        />\r\n                        <Alphabet \r\n                            alphabet = {alphabet} \r\n                            alphabetUpdate = {alphabetUpdate} \r\n                            alphabetActive = {alphabetActive}\r\n                        />\r\n                        <CaseChars \r\n                            selectCase = {selectCase}\r\n                            includeChars = {includeChars}\r\n                        />\r\n                    </div>\r\n                break\r\n            case 'rsa': \r\n                bodyInput = \r\n                    <Primes \r\n                        inputValue={inputValue}\r\n                        setPrimeOne = {setPrimeOne}\r\n                        setPrimeTwo = {setPrimeTwo}\r\n                        setE = {setE}\r\n                        e = {e}\r\n                        prime_one = {prime_one}\r\n                        prime_two = {prime_two}\r\n                        phi = {phi}\r\n                        n = {n}\r\n                        d = {d}\r\n                        timeToCalculate = {timeToCalculate}\r\n                    />\r\n                break\r\n            case 'rot13':\r\n                bodyInput = \r\n                    <div className=\"block_body_input\">\r\n                        <Alphabet \r\n                            alphabet = {alphabet} \r\n                            alphabetUpdate = {alphabetUpdate} \r\n                            alphabetActive = {alphabetActive}\r\n                        />\r\n                        <CaseChars \r\n                            selectCase = {selectCase}\r\n                            includeChars = {includeChars}\r\n                        />\r\n                    </div> \r\n                break\r\n            case 'caesar':\r\n                bodyInput = \r\n                    <div className=\"block_body_input\">\r\n                        <CaesarShift                   \r\n                            plusMinus = {caesarPlusMinus}\r\n                            cShift = {cShift}\r\n                        />\r\n                        <CaesarTransposition \r\n                            cShift = {cShift}\r\n                            direction = {direction}\r\n                            alphabet = {alphabet}\r\n                        />\r\n                        <Alphabet \r\n                            alphabet = {alphabet} \r\n                            alphabetUpdate = {alphabetUpdate} \r\n                            alphabetActive = {alphabetActive}\r\n                        />\r\n                        <CaseChars \r\n                            selectCase = {selectCase}\r\n                            includeChars = {includeChars}\r\n                        />\r\n                    </div>\r\n                break\r\n            case 'affine':\r\n                bodyInput = \r\n                    <div className=\"block_body_input\">\r\n                        <Alpha\r\n                            setAlpha = {setAlpha}\r\n                            setBeta = {setBeta}\r\n                        />\r\n                        <Alphabet \r\n                            alphabet = {alphabet} \r\n                            alphabetUpdate = {alphabetUpdate} \r\n                            alphabetActive = {alphabetActive}\r\n                        />\r\n                        <CaseChars \r\n                            selectCase = {selectCase}\r\n                            includeChars = {includeChars}\r\n                        />\r\n                    </div>\r\n                break\r\n            case 'vigenere':\r\n                bodyInput = \r\n                    <div className=\"block_body_input\">\r\n                        <KeywordVigenere\r\n                            updateKeyword={updateKeyword}\r\n                            keyword={keyword}\r\n                        />\r\n                        <Alphabet \r\n                            alphabet = {alphabet} \r\n                            alphabetUpdate = {alphabetUpdate} \r\n                            alphabetActive = {alphabetActive}\r\n                        />\r\n                        <CaseChars \r\n                            selectCase = {selectCase}\r\n                            includeChars = {includeChars}\r\n                        />\r\n                    </div> \r\n                break\r\n            case 'playfair':\r\n                bodyInput = \r\n                    <div className=\"block_body_input\">\r\n                        <PlayfairSquare \r\n                            playSquare={playSquare}\r\n                        />\r\n                        <CharOptions />\r\n                        <KeywordPlayfair\r\n                            updateKeyword={updateKeyword}\r\n                            keyword={keyword}\r\n                        />\r\n                        <Alphabet \r\n                            alphabet = {alphabet} \r\n                            alphabetUpdate = {alphabetUpdate} \r\n                            alphabetActive = {alphabetActive}\r\n                        />\r\n                        <CaseChars \r\n                            selectCase = {selectCase}\r\n                            includeChars = {includeChars}\r\n                        />\r\n                    </div> \r\n                break\r\n            case 'morse':\r\n                bodyInput = null\r\n                break\r\n            case 'replace':\r\n                bodyInput = \r\n                    <ReplaceKeys \r\n                        setReplaceLetters = {setReplaceLetters}\r\n                        toReplaceLetter = {toReplaceLetter}\r\n                        replaceLetter = {replaceLetter}\r\n                    />\r\n                break\r\n            case 'skytale':\r\n                bodyInput = \r\n                    <div>\r\n                        <RingLength \r\n                            ringLength = {ringLength}\r\n                            plusMinus = {skytalePlusMinus}\r\n                        />\r\n                        <Rings \r\n                            ringLength = {ringLength}\r\n                            skytaleLength = {skytaleLength}\r\n                            outputValue = {skytaleProjectedValue}\r\n                        />\r\n                        <Alphabet \r\n                            alphabet = {alphabet} \r\n                            alphabetUpdate = {alphabetUpdate} \r\n                            alphabetActive = {alphabetActive}\r\n                        />\r\n                        <CaseChars \r\n                            selectCase = {selectCase}\r\n                            includeChars = {includeChars}\r\n                        />\r\n                    </div>\r\n                break\r\n            case 'otp':\r\n                bodyInput = \r\n                    <div>\r\n                        <OtpGenerate \r\n                            genRandomKey = {genRandomKey}\r\n                            otpKey = {otpKey}\r\n                        />\r\n                        <CaseChars \r\n                            selectCase = {selectCase}\r\n                            includeChars = {includeChars}\r\n                        />\r\n                        <Alphabet \r\n                            alphabet = {alphabet} \r\n                            alphabetUpdate = {alphabetUpdate} \r\n                            alphabetActive = {alphabetActive}\r\n                        />\r\n                    </div>\r\n                break\r\n            default: return null\r\n        }\r\n        return bodyInput;\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            {switchBodyInput()}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default BlockBodyInput","import React from 'react'\r\nimport ExplanatoryText from './ExplanatoryText'\r\nimport BlockHeadSettings from './BlockHeadSettings'\r\nimport Settings from './settings'\r\n\r\nconst BlockElementSettings = ({ cShift, \r\n                                caesarPlusMinus,\r\n                                skytalePlusMinus,\r\n                                alphabet, \r\n                                alphabetUpdate, \r\n                                selectCase, \r\n                                includeChars, \r\n                                switchModal, \r\n                                method, \r\n                                methodNameInset, \r\n                                changeDirection, \r\n                                direction,\r\n                                setAlpha,\r\n                                setBeta,\r\n                                updateKeyword,\r\n                                keyword,\r\n                                playSquare,\r\n                                setReplaceLetters,\r\n                                toReplaceLetter,\r\n                                replaceLetter,\r\n                                ringLength,\r\n                                skytaleLength,\r\n                                skytaleProjectedValue,\r\n                                alphabetActive,\r\n                                updateOtpKey,\r\n                                genRandomKey,\r\n                                otpKey,\r\n                                inputValue,\r\n                                setPrimeOne,\r\n                                setPrimeTwo,\r\n                                setE,\r\n                                e,\r\n                                prime_one,\r\n                                prime_two,\r\n                                phi,\r\n                                n,\r\n                                d,\r\n                                timeToCalculate\r\n                                }) => {\r\n  return (\r\n    <div className=\"block_settings\">\r\n      <BlockHeadSettings \r\n        switchModal={switchModal} \r\n        methodNameInset={methodNameInset}\r\n        changeDirection={changeDirection}\r\n      />\r\n      <div className=\"block_body\">\r\n          <div className=\"block_body_input\">\r\n              <Settings \r\n                alphabetActive = {alphabetActive}\r\n                direction={direction}\r\n                cShift={cShift}\r\n                alphabet={alphabet}\r\n                alphabetUpdate={alphabetUpdate}\r\n                selectCase={selectCase}\r\n                includeChars={includeChars}\r\n                method={method}\r\n                setAlpha={setAlpha}\r\n                setBeta={setBeta}\r\n                updateKeyword={updateKeyword}\r\n                keyword={keyword}\r\n                playSquare = {playSquare}\r\n                setReplaceLetters = {setReplaceLetters}\r\n                toReplaceLetter = {toReplaceLetter}\r\n                replaceLetter = {replaceLetter}\r\n                ringLength = {ringLength}\r\n                skytaleLength = {skytaleLength}\r\n                skytaleProjectedValue = {skytaleProjectedValue}\r\n                updateOtpKey = {updateOtpKey}\r\n                inputValue = {inputValue}\r\n                genRandomKey = {genRandomKey}\r\n                otpKey = {otpKey}\r\n                setPrimeOne = {setPrimeOne}\r\n                setPrimeTwo = {setPrimeTwo}\r\n                setE = {setE}\r\n                e = {e}\r\n                prime_one = {prime_one}\r\n                prime_two = {prime_two}\r\n                phi = {phi}\r\n                n = {n}\r\n                d = {d}\r\n                timeToCalculate = {timeToCalculate}\r\n                caesarPlusMinus = {caesarPlusMinus}\r\n                skytalePlusMinus = {skytalePlusMinus}\r\n              />\r\n              \r\n              <ExplanatoryText \r\n                direction={direction}\r\n                method={method}\r\n              />\r\n          </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BlockElementSettings\r\n\r\n","import React, {Component} from 'react'\r\n\r\nclass Modal extends React.PureComponent {\r\n\r\n    render() {\r\n        if(this.props.modalVisible) {\r\n            return (\r\n                <div className=\"modal\" \r\n                    onClick = {this.props.switchModal}\r\n                >\r\n                    <div className=\"inner_modal\">\r\n                        <div className=\"block_top_decoration\"></div>\r\n                        <div className=\"modal_header\">Encryption Methods</div>\r\n                        <div className=\"modal_body\">\r\n                            <div className=\"method_category\">\r\n                                <span className=\"modal_category_title\">Ciphers</span>\r\n                                <ul>\r\n                                    <li>\r\n                                        <button \r\n                                            className=\"modal_category_method\" \r\n                                            value=\"atbash\"\r\n                                            onClick={(evt) => {\r\n                                                this.props.changeMethod(evt)\r\n                                            }}\r\n                                        >\r\n                                        Atbash Cipher\r\n                                        </button>\r\n                                    </li>\r\n                                    <li>\r\n                                        <button \r\n                                            className=\"modal_category_method\" \r\n                                            value=\"caesar\"\r\n                                            onClick={(evt) => {\r\n                                                this.props.changeMethod(evt)\r\n                                            }}\r\n                                        >\r\n                                        Ceasars Cipher\r\n                                        </button>\r\n                                    </li>\r\n                                    <li>\r\n                                        <button \r\n                                            className=\"modal_category_method\" \r\n                                            value=\"skytale\"\r\n                                            onClick={(evt) => {\r\n                                                this.props.changeMethod(evt)\r\n                                            }}\r\n                                        >\r\n                                        Skytale\r\n                                        </button>\r\n                                    </li>\r\n                                    <li>\r\n                                        <button \r\n                                            className=\"modal_category_method\" \r\n                                            value=\"affine\"\r\n                                            onClick={(evt) => {\r\n                                                this.props.changeMethod(evt)\r\n                                            }}\r\n                                        >\r\n                                        Affine Cipher\r\n                                        </button>\r\n                                    </li>\r\n                                    <li>\r\n                                        <button \r\n                                            className=\"modal_category_method\" \r\n                                            value=\"vigenere\"\r\n                                            onClick={(evt) => {\r\n                                                this.props.changeMethod(evt)\r\n                                            }}\r\n                                        >\r\n                                        Vigenère Cipher\r\n                                        </button>\r\n                                    </li>\r\n                                    <li>\r\n                                        <button \r\n                                            className=\"modal_category_method\" \r\n                                            value=\"playfair\"\r\n                                            onClick={(evt) => {\r\n                                                this.props.changeMethod(evt)\r\n                                            }}\r\n                                        >\r\n                                        Playfair Cipher\r\n                                        </button>\r\n                                    </li>\r\n                                    <li>\r\n                                        <button \r\n                                            className=\"modal_category_method\" \r\n                                            value=\"otp\"\r\n                                            onClick={(evt) => {\r\n                                                this.props.changeMethod(evt)\r\n                                            }}\r\n                                        >\r\n                                        One Time Pad\r\n                                        </button>\r\n                                    </li>\r\n                                    <li>\r\n                                        <button \r\n                                            className=\"modal_category_method\" \r\n                                            value=\"rot13\"\r\n                                            onClick={(evt) => {\r\n                                                this.props.changeMethod(evt)\r\n                                            }}\r\n                                        >\r\n                                        ROT13\r\n                                        </button>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"method_category\">\r\n                                <span className=\"modal_category_title\">Alphabets</span>\r\n                                <ul>\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"modal_category_method\"\r\n                                            value=\"morse\"\r\n                                            onClick={(evt) => {\r\n                                                this.props.changeMethod(evt)\r\n                                            }}\r\n                                        >\r\n                                        Morse Code\r\n                                        </button>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"method_category\">\r\n                                <span className=\"modal_category_title\">Public Key Encryption</span>\r\n                                <ul>\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"modal_category_method\"\r\n                                            value=\"rsa\"\r\n                                            onClick={(evt) => {\r\n                                                this.props.changeMethod(evt)\r\n                                            }}\r\n                                        >\r\n                                        RSA\r\n                                        </button>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"method_category\">\r\n                                <span className=\"modal_category_title\">Text Transformations</span>\r\n                                <ul>\r\n                                    <li>\r\n                                        <button\r\n                                            className=\"modal_category_method\"\r\n                                            value=\"replace\"\r\n                                            onClick={(evt) => {\r\n                                                this.props.changeMethod(evt)\r\n                                            }}\r\n                                        >\r\n                                        Replace\r\n                                        </button>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        } else return null\r\n    }\r\n}\r\n\r\nexport default Modal","import math from '../math/Math';\r\n\r\nconst caesar = (() => {\r\n  //Setup all variables\r\n  math.restoreForeignChars();\r\n  let userInput,\r\n    saltInput,\r\n    alphabet,\r\n    direction,\r\n    wordbook,\r\n    caseFormat,\r\n    includeChars;\r\n\r\n  const setUserInput = input => {\r\n    userInput = String(input);\r\n  };\r\n\r\n  const setSaltInput = input => {\r\n    saltInput = Number(input);\r\n  };\r\n\r\n  const setAlphabet = input => {\r\n    alphabet = input.split('');\r\n  };\r\n\r\n  const setForeignChars = input => {\r\n    includeChars = input;\r\n  };\r\n\r\n  const setCase = input => {\r\n    caseFormat = input;\r\n  };\r\n\r\n  const setDirection = input => {\r\n    direction = input;\r\n  };\r\n\r\n  //Standart Caesar Method\r\n\r\n  const charIndex = char => {\r\n    const index = alphabet.indexOf(char);\r\n    let alLength = alphabet.length;\r\n\r\n    if (direction === 'encrypt') {\r\n      if (index + saltInput < alLength) {\r\n        return index + saltInput;\r\n      } else {\r\n        return index + saltInput - alLength;\r\n      }\r\n    } else {\r\n      if (index - saltInput >= 0) {\r\n        return index - saltInput;\r\n      } else {\r\n        return index - saltInput + alLength;\r\n      }\r\n    }\r\n  };\r\n\r\n  const readChar = () => {\r\n    const decryptedChars = [];\r\n\r\n    let cleanInput = math.cleanInput(userInput, false, false, alphabet);\r\n\r\n    for (let char of cleanInput) {\r\n      let charLower = char.toLowerCase();\r\n      let index = charIndex(charLower);\r\n      let decryptedChar = alphabet[index];\r\n      decryptedChars.push(decryptedChar);\r\n    }\r\n\r\n    return decryptedChars.join('');\r\n  };\r\n\r\n  //Crack functionality\r\n\r\n  const setWordbook = words => {\r\n    wordbook = words;\r\n  };\r\n\r\n  const readCharCrack = (textinput, salt) => {\r\n    const decryptedChars = [];\r\n    for (let char of textinput) {\r\n      let charLower = char.toLowerCase();\r\n      if (alphabet.includes(charLower)) {\r\n        const position = charIndexCrack(charLower, salt);\r\n        if (charLower === char) {\r\n          decryptedChars.push(alphabet[position]);\r\n        } else {\r\n          decryptedChars.push(alphabet[position].toUpperCase());\r\n        }\r\n      } else decryptedChars.push(char);\r\n    }\r\n    return decryptedChars.join('');\r\n  };\r\n\r\n  const charIndexCrack = (char, saltInput) => {\r\n    const index = alphabet.indexOf(char);\r\n    if (index + saltInput < alphabet.length) {\r\n      return index + saltInput;\r\n    } else {\r\n      return index + saltInput - alphabet.length;\r\n    }\r\n  };\r\n\r\n  const removeSignsKeepSpaces = textinput => {\r\n    let output = [];\r\n    for (let char of textinput) {\r\n      if (alphabet.indexOf(char) !== -1 || char === ' ') {\r\n        output.push(char);\r\n      }\r\n    }\r\n    return output.join('');\r\n  };\r\n\r\n  const createAllOutputs = () => {\r\n    let arr = [];\r\n    const textinput = removeSignsKeepSpaces(userInput.toLowerCase());\r\n    for (let i = 1; i < 26; i++) {\r\n      let salt = i;\r\n      const textoutput = readCharCrack(textinput, salt);\r\n      arr.push(textoutput.split(' '));\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  const findWords = words => {\r\n    let allOutputs = createAllOutputs();\r\n    let possibleCombinations = {};\r\n    let counter = 0;\r\n    // Brute Force lookup all possibilities against the english dictionary\r\n\r\n    for (let output of allOutputs) {\r\n      possibleCombinations[counter] = [];\r\n      for (let word of output) {\r\n        if (words[word] === 1) {\r\n          possibleCombinations[counter].push(word);\r\n        }\r\n      }\r\n      counter++;\r\n    }\r\n\r\n    // Find the option with the most words fitting and return them\r\n\r\n    let keys = Object.keys(possibleCombinations);\r\n    let length = 0;\r\n    let result;\r\n\r\n    for (let key of keys) {\r\n      if (possibleCombinations[key].length > length) {\r\n        length = possibleCombinations[key].length;\r\n        result = possibleCombinations[key];\r\n      }\r\n    }\r\n    if (length === 0)\r\n      return `Weird text you got there! This tool can only crack english texts that are encrypted with the caesar cipher! Your input: \"${userInput}\"`;\r\n    return result.join(' ');\r\n  };\r\n\r\n  const loadWordbook = () => {\r\n    if (!userInput) return;\r\n    else return findWords(wordbook);\r\n  };\r\n\r\n  const checkIfSigns = () => {\r\n    return alphabet.length > 26 ? false : true;\r\n  };\r\n\r\n  //Crack or other ? Return the according method\r\n\r\n  const encrypt = () => {\r\n    if (direction !== 'crack') {\r\n      let rawOutput = readChar();\r\n      if (checkIfSigns()) {\r\n        return math.transformCaseAndChars(\r\n          userInput,\r\n          rawOutput,\r\n          caseFormat,\r\n          includeChars\r\n        );\r\n      } else return rawOutput;\r\n    } else if (direction === 'crack') {\r\n      return loadWordbook();\r\n    }\r\n  };\r\n\r\n  return {\r\n    setUserInput: setUserInput,\r\n    setSaltInput: setSaltInput,\r\n    setAlphabet: setAlphabet,\r\n    setDirection: setDirection,\r\n    setWordbook: setWordbook,\r\n    setForeignChars: setForeignChars,\r\n    setCase: setCase,\r\n    encrypt: encrypt\r\n  };\r\n})();\r\n\r\nexport default caesar;\r\n","import math from '../math/Math'\r\n\r\nconst affine = (() => {\r\n\r\n    //Setup all variables\r\n    \r\n    let userInput, alphabet, direction, caseFormat, includeChars, alpha, beta, correctedInput\r\n\r\n    const setUserInput = (input) => {\r\n        userInput = String(input);\r\n        let temp = []\r\n        for(let char of userInput) {\r\n            if(alphabet.indexOf(char.toLowerCase()) !== -1) {\r\n                temp.push(char)\r\n            }\r\n        }\r\n        correctedInput = temp.join('')\r\n    }\r\n\r\n    const setAlpha = (input) => {\r\n        alpha = Number(input)\r\n    }\r\n\r\n    const setBeta = (input) => {\r\n        beta = Number(input)\r\n    }\r\n\r\n    const setAlphabet = (input) => {\r\n        alphabet = input.split('')\r\n    }\r\n\r\n    const setForeignChars = (input) => {\r\n        includeChars = input\r\n    }\r\n\r\n    const setCase = (input) => {\r\n        caseFormat = input\r\n    }\r\n\r\n    const setDirection = (input) => {\r\n        direction = input;\r\n    }\r\n\r\n\r\n    //Affine Method\r\n\r\n    // Modulo to account for stupid js\r\n\r\n    const modulo = (a, b) => {\r\n        return(a % b + b) % b;\r\n    }\r\n\r\n    // Modular inverse by brute force\r\n    \r\n    const modInverse = (a, b) => {\r\n        a %= b;\r\n        for (var x = 1; x < b; x++) {\r\n            if ((a * x) % b === 1) {\r\n                return x;\r\n            }\r\n        }\r\n    }\r\n\r\n    const encrypt = (input, a, b) => {\r\n        let arr = [];\r\n        let lowerInput = input.toLowerCase()\r\n        for(let i = 0; i < lowerInput.length; i++) {\r\n            let char = lowerInput[i];\r\n            if(alphabet.indexOf(char) !== -1) {\r\n                let numberId = (a * alphabet.indexOf(char) + b) % alphabet.length;\r\n                let character = alphabet[numberId];\r\n                if(character === undefined) {\r\n                    arr.push(char)\r\n                } else arr.push(character);\r\n            } else arr.push(lowerInput[i]);\r\n        }\r\n        return arr.join('');\r\n    }\r\n\r\n    \r\n\r\n    const decrypt = (input, a, b) => {\r\n        let arr = [];\r\n        let inverseAlpha = modInverse(a, alphabet.length)\r\n        let lowerInput = input.toLowerCase()\r\n        for(let i = 0; i < lowerInput.length; i++) {\r\n            let char = lowerInput[i];\r\n            if(alphabet.indexOf(char) !== -1) {\r\n                let indexChar = alphabet.indexOf(char)\r\n                let resultIndex = modulo(inverseAlpha * (indexChar - b), alphabet.length)\r\n                if(alphabet[resultIndex]) {\r\n                    arr.push(alphabet[resultIndex])    \r\n                } else {\r\n                    arr.push(char)\r\n                }\r\n            } else {\r\n                arr.push(char);\r\n            }\r\n        };\r\n        return arr.join('');\r\n    }\r\n\r\n    const transformText = () => {\r\n        let rawOutput\r\n        direction === 'encrypt' ? rawOutput = encrypt(correctedInput, alpha, beta) : rawOutput = decrypt(correctedInput, alpha, beta)\r\n        return math.transformCaseAndChars(userInput, rawOutput, caseFormat, includeChars)\r\n    } \r\n\r\n\r\n    return {\r\n        setUserInput: setUserInput,\r\n        setAlpha: setAlpha,\r\n        setBeta: setBeta,\r\n        setAlphabet: setAlphabet,\r\n        setDirection: setDirection,\r\n        setForeignChars: setForeignChars,\r\n        setCase: setCase,\r\n        encrypt: transformText\r\n    }\r\n})();\r\n\r\n\r\nexport default affine;\r\n\r\n","const vigenere = (() => {\r\n\r\n    //Setup all variables\r\n    \r\n    let userInput, alphabet, direction, caseFormat, includeChars, keywordVigenere\r\n\r\n    const setUserInput = (input) => {\r\n        userInput = String(input);\r\n    }\r\n\r\n    const setAlphabet = (input) => {\r\n        alphabet = input.split('')\r\n        alphabet = [...new Set(alphabet)].join('')\r\n        alphabet = alphabet.replace(/[^0-9a-zA-Z]/gi, '')\r\n    }\r\n\r\n    const setForeignChars = (input) => {\r\n        includeChars = input\r\n    }\r\n\r\n    const setCase = (input) => {\r\n        caseFormat = input\r\n    }\r\n\r\n    const setDirection = (input) => {\r\n        direction = input\r\n    }\r\n\r\n    const setKeyWord = (input) => {\r\n        keywordVigenere = input.toLowerCase()\r\n    }\r\n\r\n    const createSaltArray = (salt, textInput) => {\r\n        const saltArray = [];\r\n        let i = 0;\r\n        while(textInput.length >= saltArray.length){\r\n            if(i === salt.length) i = 0;\r\n            saltArray.push(salt[i]);\r\n            i++;\r\n        }\r\n        return saltArray;\r\n    }\r\n\r\n    const alphabetFromCharacter = (char) => {\r\n        let index = alphabet.indexOf(char);\r\n        const alphabetVig = [];\r\n        while(alphabetVig.length < 26) {\r\n            alphabetVig.push(alphabet[index]);\r\n            if(index === 25) {\r\n                index = 0;\r\n            } else if (index < 25) index++;\r\n        }\r\n        return alphabetVig;\r\n    }\r\n\r\n    const encryptCharacterVigenere = (textInput, salt, index) => {\r\n        const char = textInput[index];\r\n        const saltLetter = createSaltArray(salt, textInput)[index];\r\n        const vigalphabet = alphabetFromCharacter(saltLetter);\r\n        const encryptedCharacter = vigalphabet[alphabet.indexOf(char)];\r\n        return encryptedCharacter;\r\n    }\r\n\r\n    const decryptCharacterVigenere = (textInput, salt, index) => {\r\n        const char = textInput[index];\r\n        const saltLetter = createSaltArray(salt, textInput)[index];\r\n        const vigalphabet = alphabetFromCharacter(saltLetter);\r\n        return alphabet[vigalphabet.indexOf(char)]\r\n    }\r\n\r\n    const transformText = () => {\r\n\r\n        const textinputCleaned = removeSigns(userInput.toLowerCase(), false)\r\n        let textoutput = readChar(textinputCleaned, keywordVigenere)\r\n        \r\n        textoutput = addSigns(textoutput, userInput)\r\n        if(caseFormat === 'ignore') {\r\n            if(includeChars === 'include') {\r\n                return textoutput\r\n            } else if(includeChars === 'ignore') {\r\n                return removeSigns(textoutput, true)\r\n            }\r\n        } else if(caseFormat === 'maintain') {\r\n            if(includeChars === 'include') {\r\n                return caseTransform(userInput, textoutput)\r\n            } else if(includeChars === 'ignore') {\r\n                return removeSigns(caseTransform(userInput, textoutput), true)\r\n            }\r\n        }\r\n\r\n        \r\n        //return caseTransform(user, textoutput)\r\n    }\r\n\r\n    const caseTransform = (textinput, textoutput) => {\r\n        let output = [];\r\n        for(let i = 0; i < textinput.length; i++){\r\n            if(textoutput[i]) {\r\n               textinput[i].toUpperCase() === textinput[i] ? output.push(textoutput[i].toUpperCase()) : output.push(textoutput[i].toLowerCase()); \r\n            }\r\n        }\r\n        return output.join('');\r\n    }\r\n\r\n    const removeSigns = (textinput, spaces) => {\r\n        // spaces false = remove all signs\r\n        // spaces true = leave the spacing\r\n        let output = [];\r\n        for(let char of textinput) {\r\n            if(spaces === false) {\r\n                if(alphabet.indexOf(char.toLowerCase()) !== -1) {\r\n                    output.push(char);\r\n                }    \r\n            } else if(spaces === true) {\r\n                if(alphabet.indexOf(char.toLowerCase()) !== -1 || char === ' '){\r\n                    output.push(char);\r\n                }\r\n            }\r\n            \r\n        }\r\n        return output.join('');\r\n    }\r\n\r\n    const addSigns = (textoutput, textinput) => {\r\n        textinput = textinput.toLowerCase();\r\n        let output = [];\r\n        let i = 0;\r\n        for(let element of textinput) {\r\n            if(alphabet.indexOf(element) === -1) {\r\n                output.push(element);\r\n            } else {\r\n                output.push(textoutput[i]);\r\n                i++;\r\n            }\r\n        }\r\n        return output.join('');\r\n    }\r\n\r\n    const readChar = (textinput, salt) =>{\r\n        let text = [];\r\n        for(let i = 0; i < textinput.length; i++) {\r\n            if(alphabet.indexOf(textinput[i]) === -1) {\r\n                    text.push(textinput[i]);\r\n            } else {\r\n                if(direction === 'encrypt') {\r\n                    text.push(encryptCharacterVigenere(textinput, salt, i));\r\n                } else {\r\n                    text.push(decryptCharacterVigenere(textinput, salt, i));  \r\n                }\r\n            }\r\n        }\r\n        return text;\r\n    }\r\n\r\n    \r\n\r\n    return {\r\n        setKeyword: setKeyWord,\r\n        setUserInput: setUserInput,\r\n        setAlphabet: setAlphabet,\r\n        setDirection: setDirection,\r\n        setForeignChars: setForeignChars,\r\n        setCase: setCase,\r\n        encrypt: transformText\r\n    }\r\n})();\r\n\r\n\r\nexport default vigenere","const Playfair = (() => {\r\n\r\n    //Setup all variables\r\n    \r\n    let userInput, alphabet, direction, keyphrase\r\n    let replaceLetter = 'x'\r\n    let missingLetter = 'j'\r\n    let playSquare\r\n\r\n    const getSquare = () => playSquare\r\n\r\n    const setUserInput = (input) => {\r\n        userInput = String(input);\r\n    }\r\n\r\n    const setAlphabet = (input) => {\r\n        alphabet = input.split('')\r\n    }\r\n\r\n    const setDirection = (input) => {\r\n        direction = input;\r\n    }\r\n\r\n    const setKeyPhrase = (input) => {\r\n        keyphrase = input\r\n    }\r\n\r\n    const createPairsOfFive = (alphabet) => {\r\n\r\n        // Sort the generated Alphabet into 5 pairs of 5 characters each\r\n    \r\n        const fiveElementPairs = [];\r\n        let pair = [];\r\n    \r\n        for(let i = 0; i <= alphabet.length; i++){\r\n            if(i === 0 || i % 5 !== 0) {\r\n                pair.push(alphabet[i]);\r\n            } else if(pair[0]) {\r\n                fiveElementPairs.push(pair);\r\n                pair = [];\r\n                pair.push(alphabet[i]);\r\n            }\r\n        };\r\n        return fiveElementPairs;\r\n    }\r\n\r\n    const rowColumnEncrypt = (element, charPair) => {\r\n\r\n        // Get the next letter in the row/column or start from beginning of row/column and encrypt with index + 1\r\n    \r\n        let chars = [];\r\n        \r\n        for(let i = 0; i < 2; i++) {\r\n            const index = element.indexOf(charPair[i]);\r\n            if(index === 4) {\r\n                if(direction === 'encrypt') { \r\n                    chars.push(element[0]); \r\n                } else {\r\n                    chars.push(element[3]);\r\n                }\r\n            } else {\r\n                if(direction === 'decrypt') {\r\n                    let newIndex = index - 1;\r\n                    if(newIndex < 0) newIndex = 4;\r\n                    chars.push(element[newIndex]);\r\n                } else {\r\n                    chars.push(element[index + 1]);\r\n                }\r\n            }\r\n        }\r\n        return chars;\r\n    }\r\n\r\n    const methodFinder = (alphabet, charPair) => {\r\n        const fiveElementPairs = createPairsOfFive(alphabet);\r\n    \r\n        // Find the method\r\n    \r\n        // Is the Method a row combination ?\r\n        \r\n        for(let element of fiveElementPairs) {\r\n            if(element.indexOf(charPair[0]) !== -1  && element.indexOf(charPair[1]) !== -1) {\r\n    \r\n                //Encrypt and return\r\n                return rowColumnEncrypt(element, charPair)\r\n            }\r\n        }\r\n    \r\n        // Is the Method a column combination ?\r\n        // Convert all columns to rows for ease of use\r\n    \r\n        const fiveElementPairsReverse = [];\r\n            \r\n        for(let i = 0; i < 5; i++) {\r\n            let columnArr = [];\r\n            for(let j = 0; j < 5; j++) {\r\n                columnArr.push(fiveElementPairs[j][i])\r\n            }\r\n            fiveElementPairsReverse.push(columnArr);\r\n            columnArr = [];\r\n        }\r\n    \r\n        // Then encrypt and return\r\n    \r\n        for(let element of fiveElementPairsReverse) {\r\n            if(element.indexOf(charPair[0]) !== -1 && element.indexOf(charPair[1]) !== -1) {\r\n                return rowColumnEncrypt(element, charPair);\r\n            }\r\n        }\r\n    \r\n        // Else the method is always 'rectangle':\r\n    \r\n        // Get the index of both elements in theire respective rows\r\n    \r\n        const indexes = [];\r\n        let char1 = charPair[0];\r\n        let char2 = charPair[1];\r\n        \r\n        for(let element of fiveElementPairs) {\r\n            if(element.indexOf(char1) !== -1) {\r\n                indexes[0] = element.indexOf(char1);\r\n            } else if(element.indexOf(char2) !== -1) {\r\n                indexes[1] = element.indexOf(char2);\r\n            }\r\n        }\r\n    \r\n        // Reverse the indexes to get the corresponding character of the row\r\n    \r\n        let encryptedChar1;\r\n        let encryptedChar2;\r\n    \r\n        for(let element of fiveElementPairs) {\r\n            if(element.indexOf(char1) !== -1) {\r\n                encryptedChar1 = element[indexes[1]];\r\n            } \r\n            if(element.indexOf(char2) !== -1) {\r\n                encryptedChar2 = element[indexes[0]];\r\n            }\r\n        }\r\n        return [encryptedChar1, encryptedChar2];\r\n    }\r\n\r\n    const alphabetFromCharacter = () => {\r\n        const ommited = missingLetter;\r\n    \r\n        //generate alphabet from keyphrase with a set and push missing characters\r\n    \r\n        const key = [...new Set(keyphrase)];\r\n        for(let char of alphabet) {\r\n            if(key.indexOf(char) === -1) {\r\n                key.push(char)\r\n            }\r\n        }\r\n    \r\n        // check if character is the ommited one. create element with id to visualize table.\r\n        \r\n        const arr = [];\r\n    \r\n        for(let char of key) {\r\n            if(char !== ommited && alphabet.indexOf(char) !== -1) {\r\n                arr.push(char);\r\n            }\r\n        }\r\n        playSquare = arr;\r\n        return arr;\r\n    }\r\n\r\n    const transformInput = (textinput) => {\r\n        const twoLetterPairs = [];\r\n        const cleanText = [...textinput];\r\n    \r\n        // Find elements that are the same in one pair f.e. 'ee' and replace them with the chosen character\r\n        \r\n        for(let i = 0; i < cleanText.length; i += 2){\r\n            if(cleanText[i] === cleanText[i + 1]){\r\n                cleanText.splice(i + 1, 0, replaceLetter)\r\n            }\r\n        };\r\n    \r\n        // Is the length odd ? Put an x at the end\r\n    \r\n        if(cleanText.length % 2 !== 0) {\r\n            cleanText.push(replaceLetter);\r\n        }\r\n    \r\n        // Push pairs of letters into array\r\n    \r\n        for(let i = 0; i < cleanText.length; i += 2) {\r\n            twoLetterPairs.push([cleanText[i], cleanText[i + 1]]);\r\n        };\r\n        return twoLetterPairs;\r\n    }\r\n\r\n    const removeSigns = () => {\r\n        let textinput = userInput.toLowerCase()\r\n        let output = [];\r\n        for(let char of textinput) {\r\n            if(alphabet.indexOf(char) !== -1) {\r\n                output.push(char);\r\n            }\r\n        }\r\n        return output.join('');\r\n    }\r\n\r\n    const transformText = () => {\r\n\r\n        // Get the pairs to encrypt\r\n        const cleanInput = removeSigns();\r\n        const pairs = transformInput(cleanInput);\r\n        const alphabet = alphabetFromCharacter();\r\n    \r\n        // Feed the pairs to the methodfinder\r\n        const encrypted = [];\r\n    \r\n        for(let element of pairs){\r\n            encrypted.push(methodFinder(alphabet, element));\r\n        }\r\n    \r\n        let unformatted = encrypted.join('').split(',').join('');\r\n        //let formatted = spaceTransform(unformatted)\r\n        return unformatted;\r\n    }\r\n\r\n    return {\r\n        setUserInput: setUserInput,\r\n        setAlphabet: setAlphabet,\r\n        setDirection: setDirection,\r\n        setKeyPhrase: setKeyPhrase,\r\n        getSquare: getSquare,\r\n        encrypt: transformText\r\n    }\r\n})();\r\n\r\n\r\nexport default Playfair;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\nplayfaireSquare() {\r\n    //generate table with letters for playfair\r\n    const visualMatrix = document.createElement('div');\r\n    visualMatrix.id = 'visualMatrix';\r\n\r\n    let indTable = 0;\r\n    for(let i = 0; i < 5; i++){\r\n        for(let j = 0; j < 5; j++){\r\n            const playfairTableElement = document.createElement('div');\r\n            playfairTableElement.setAttribute('id', 'table' + indTable);\r\n            playfairTableElement.setAttribute('class', 'playfairTable')\r\n            visualMatrix.appendChild(playfairTableElement);\r\n            indTable++;\r\n        }\r\n    }\r\n    return visualMatrix;\r\n},\r\n\r\nremoveMatrix() {\r\n    if(document.getElementById('visualMatrix')) {\r\n        const visualMatrix = document.getElementById('visualMatrix');\r\n        visualMatrix.remove();\r\n    }\r\n},\r\n\r\n\r\n\r\n\r\n*/","const morse = (() => {\r\n\r\n    //Setup all variables\r\n    \r\n    let userInput, direction\r\n    const setUserInput = (input) => {\r\n        userInput = String(input);\r\n    }\r\n\r\n    const setDirection = (input) => {\r\n        direction = input;\r\n    }\r\n\r\n    const characters = {\r\n        'a': '.-',\r\n        'b': '-...',\r\n        'c': '-.-.',\r\n        'd': '-..',\r\n        'e': '.',\r\n        'f': '..-.',\r\n        'g': '--.',\r\n        'h': '....',\r\n        'i': '..',\r\n        'j': '.---',\r\n        'k': '-.-',\r\n        'l': '.-..',\r\n        'm': '--',\r\n        'n': '-.',\r\n        'o': '---',\r\n        'p': '.--.',\r\n        'q': '--.-',\r\n        'r': '.-.',\r\n        's': '...',\r\n        't': '-',\r\n        'u': '..-',\r\n        'v': '...-',\r\n        'w': '.--',\r\n        'x': '-..-',\r\n        'y': '-.--',\r\n        'z': '--..',\r\n        '0': '-----',\r\n        '1': '.----',\r\n        '2': '..---',\r\n        '3': '...--',\r\n        '4': '....-',\r\n        '5': '.....',\r\n        '6': '-....',\r\n        '7': '--...',\r\n        '8': '---..',\r\n        '9': '----.',\r\n        'ä': '.-.-',\r\n        'á': '.--.-',\r\n        'å': '.--.-',\r\n        'é': '..-..',\r\n        'ñ': '--.--',\r\n        'ö': '---.',\r\n        'ü': '..--',\r\n        '&': '.-...',\r\n        \"'\": '.----.',\r\n        '@': '.--.-.',\r\n        ')': '-.--.-',\r\n        '(': '-.--.',\r\n        ':': '---...',\r\n        ',': '--..--',\r\n        '=': '-...-',\r\n        '!': '-.-.--',\r\n        '.': '.-.-.-',\r\n        '-': '-....-',\r\n        '+': '.-.-.',\r\n        '\"': '.-..-.',\r\n        '?': '..--..',\r\n        '/': '-..-.'\r\n    }\r\n\r\n    const encrypt = (inputArray) => {\r\n        const outputArray = [];\r\n\r\n        for(let char of inputArray) {\r\n            let lowerChar = char.toLowerCase()\r\n            if(characters[lowerChar]) {\r\n                outputArray.push(characters[lowerChar] + ' ');\r\n            } else if (char === ' ') {\r\n                outputArray.push('/ ');\r\n            } else {\r\n                return [char, '...is not defined in Morse Code'];\r\n            }\r\n        }\r\n        return outputArray;\r\n    }\r\n\r\n    const decrypt = (inputArray) => {\r\n        const outputArray = [];\r\n        const values = Object.values(characters);\r\n\r\n        for(let i = 0; i < inputArray.length; i++) {\r\n            const char = inputArray[i];\r\n            if(char === '/') {\r\n                outputArray.push(' ');\r\n            } else if(values.indexOf(char) !== -1) {\r\n                outputArray.push(Object.keys(characters).find(key => characters[key] === char));\r\n            } else {\r\n                if(char) {\r\n                    return ['Invalid Characters or not valid Morse Code'];\r\n                }\r\n            }\r\n        }\r\n\r\n        return outputArray;\r\n    }\r\n\r\n    const transformText = () => {\r\n        let inputArray;\r\n\r\n        if(direction === 'encrypt') {\r\n            inputArray = [...userInput];\r\n            return encrypt(inputArray).join(' ');\r\n        } else {\r\n            inputArray = userInput.trim().split(' ');\r\n            return decrypt(inputArray).join('');\r\n        }\r\n    }\r\n\r\n    return {\r\n        setUserInput: setUserInput,\r\n        setDirection: setDirection,\r\n        encrypt: transformText\r\n    }\r\n})();\r\n\r\n\r\nexport default morse;\r\n\r\n","const replace = (() => {\r\n\r\n    let userInput, toReplaceLetter, replaceLetter\r\n\r\n    const setUserInput = (value) => {\r\n        userInput = value\r\n    }\r\n\r\n    const setToReplaceLetter = (value) => {\r\n        toReplaceLetter = value\r\n    }\r\n\r\n    const setReplaceLetter = (value) => {\r\n        replaceLetter = value\r\n    }\r\n\r\n    const replaceAll = (str1, str2, ignore) => {\r\n        return userInput.replace(new RegExp(str1.replace(/([/,!\\\\^${}[\\]().*+?|<>\\-&])/g,\"\\\\$&\"),(ignore?\"gi\":\"g\")),(typeof(str2)==\"string\")?str2.replace(/\\$/g,\"$$$$\"):str2);\r\n    };\r\n\r\n    const transformText = () => {\r\n        return replaceAll(toReplaceLetter, replaceLetter, true);\r\n    }\r\n\r\n\r\n    return {\r\n        encrypt: transformText,\r\n        setUserInput: setUserInput,\r\n        setToReplaceLetter: setToReplaceLetter,\r\n        setReplaceLetter: setReplaceLetter\r\n    }\r\n})()\r\n\r\nexport default replace","const skytale = (() => {\r\n    let userInput, caseFormat, ringLength, direction\r\n\r\n    const setUserInput = (value) => {\r\n        value = value.split(' ').join('')\r\n        userInput = value\r\n    }\r\n\r\n    const setCase = (value) => {\r\n        caseFormat = value\r\n    }\r\n\r\n    const setDirection = (value) => {\r\n        direction = value\r\n    }\r\n\r\n    const setRingLength = (value) => {\r\n        ringLength = value\r\n    }\r\n\r\n    const calcSkytaleLength = () => {\r\n        return Math.ceil(userInput.length / ringLength)\r\n    }\r\n\r\n    const getProjectedValue = () => {\r\n        let projectedValue = ''\r\n\r\n        if(direction === 'encrypt') {\r\n            setDirection('decrypt')\r\n            projectedValue = transformText(false)[0]\r\n            return projectedValue\r\n        }\r\n        else if(direction === 'decrypt') {\r\n            let tempVal = transformText(false)[0]\r\n            setUserInput(tempVal)\r\n            setDirection('decrypt')\r\n            projectedValue = transformText(false)[0]\r\n            return projectedValue\r\n        }\r\n        return projectedValue\r\n    }\r\n\r\n    const transformText = () => {\r\n        if(direction === 'encrypt') {\r\n            if(!userInput) return ''\r\n            const skytaleArr = [[]]\r\n            let j = 0;\r\n            for(let i = 0; i < userInput.length; i++) {\r\n                if(i % ringLength === 0 && i !== 0) {\r\n                    j++\r\n                    skytaleArr.push([])\r\n                    skytaleArr[j].push(userInput[i])\r\n                } else {\r\n                    skytaleArr[j].push(userInput[i])\r\n                }\r\n            }\r\n\r\n            const encryptedText = []\r\n            for(let i = 0; i < ringLength; i++) {\r\n                for(let j = 0; j < skytaleArr.length; j++) {\r\n                    if(skytaleArr[j][i]) encryptedText.push(skytaleArr[j][i])\r\n                }\r\n            }\r\n\r\n            let encrypted\r\n\r\n            if(caseFormat === 'ignore') {\r\n                encrypted = encryptedText.join('').toLowerCase()\r\n            }\r\n            else {\r\n                encrypted = encryptedText.join('')\r\n            }\r\n\r\n            let skytaleLenght = calcSkytaleLength()\r\n\r\n            return [encrypted, skytaleLenght]\r\n        }\r\n        else if(direction === 'decrypt') {\r\n            \r\n            const skytaleRows = Math.ceil(userInput.length / ringLength)\r\n            let lastRowLength = userInput.length % ringLength\r\n            if(lastRowLength === 0) lastRowLength = ringLength\r\n\r\n            const skyArr = []\r\n\r\n            for(let i = 0; i < skytaleRows; i++) {\r\n                skyArr.push([])\r\n            }\r\n\r\n            let indexOne = 0;\r\n            for(let i = 0; i < lastRowLength; i++) {\r\n                for(let j = 0; j < skytaleRows; j++) {\r\n                    skyArr[j].push(userInput[indexOne])\r\n                    indexOne++\r\n                }\r\n            }\r\n\r\n            let restInput = userInput.slice(skytaleRows * lastRowLength)\r\n            \r\n            let indexTwo = 0\r\n            for(let j = 0; j < ringLength - lastRowLength; j++) {\r\n                for(let i = 0; i < skytaleRows - 1; i++) {\r\n                    skyArr[i].push(restInput[indexTwo])\r\n                    indexTwo++\r\n                }    \r\n            }\r\n            \r\n            let encrypted\r\n\r\n            if(caseFormat === 'ignore') {\r\n                encrypted = skyArr.flat().join('').toLowerCase()\r\n            }\r\n            else {\r\n              encrypted = skyArr.flat().join('')  \r\n            }\r\n\r\n            let skytaleLenght = calcSkytaleLength()\r\n            return [encrypted, skytaleLenght]\r\n        }\r\n        \r\n    }\r\n\r\n    return {\r\n        encrypt: transformText,\r\n        setUserInput: setUserInput,\r\n        setRingLength: setRingLength,\r\n        setCase: setCase,\r\n        setDirection: setDirection,\r\n        getProjectedValue: getProjectedValue\r\n    }\r\n})()\r\n\r\nexport default skytale","import math from '../math/Math'\r\n\r\nconst atbash = (() => {\r\n\r\n    //Setup all variables\r\n    let userInput,  caseFormat, includeChars\r\n\r\n    let alphabet = 'abcdefghijklmnopqrstuvwxyz'\r\n    alphabet = alphabet.split('')\r\n\r\n    const setUserInput = (input) => {\r\n        userInput = String(input);\r\n    }\r\n\r\n    const setForeignChars = (input) => {\r\n        includeChars = input\r\n    }\r\n\r\n    const setCase = (input) => {\r\n        caseFormat = input\r\n    }\r\n\r\n    //Encryption Method\r\n    const readChar = () => {\r\n        let cleanInput = math.cleanInput(userInput, false, false, alphabet)\r\n        if(cleanInput === null) return null\r\n        \r\n        let alphabetReverse = [...alphabet].reverse()\r\n\r\n        let output = []\r\n\r\n        for(let char of cleanInput) {\r\n            let charIndex = alphabet.indexOf(char);\r\n            output.push(alphabetReverse[charIndex])   \r\n        }\r\n        \r\n        return output.join('')\r\n    }\r\n\r\n    const checkIfSigns = () => {\r\n        return alphabet.length > 26 ? false : true\r\n    }\r\n\r\n    //Crack or other ? Return the according method\r\n\r\n    const encrypt = () => {\r\n        let rawOutput = readChar()\r\n        if(checkIfSigns()) {\r\n            return math.transformCaseAndChars(userInput, rawOutput, caseFormat, includeChars) \r\n        } else return rawOutput\r\n    }\r\n\r\n    return {\r\n        \r\n        setUserInput: setUserInput,\r\n        setForeignChars: setForeignChars,\r\n        setCase: setCase,\r\n        encrypt: encrypt\r\n    }\r\n})();\r\n\r\n\r\nexport default atbash;","\r\nimport React from 'react'\r\nimport \"slick-carousel/slick/slick.css\"\r\nimport \"slick-carousel/slick/slick-theme.css\"\r\nimport Slider from \"react-slick\";\r\n\r\nclass Timeline extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props)\r\n        this.next = this.next.bind(this)\r\n        this.previous = this.previous.bind(this)\r\n        this.state = {\r\n            oldSlide: 0,\r\n            activeSlide: 1,\r\n            activeSlide2: 0\r\n        }\r\n        this.vw = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);\r\n    }\r\n    \r\n    next() {\r\n        this.slider.slickNext()\r\n    }\r\n\r\n    previous() {\r\n        this.slider.slickPrev()\r\n    }\r\n\r\n    findNextSlide(evt) {\r\n        let elem1 = evt.target.parentElement.parentElement.parentElement.parentElement\r\n        let elem2 = evt.target.parentElement.parentElement.parentElement\r\n        let goToIndex\r\n        if(elem1.classList.contains('slick-current') || elem2.classList.contains('slick-current')) {\r\n            let dataIndex1 = elem1.getAttribute('data-index')\r\n            let dataIndex2 = elem2.getAttribute('data-index')\r\n            goToIndex = dataIndex1 || dataIndex2\r\n        }\r\n\r\n        return goToIndex\r\n    }\r\n\r\n    viewportWidth = () => {\r\n            if(this.vw < 1100) {\r\n                return 1\r\n            } else return 1\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        const listMethods = ['atbash', 'skytale', 'caesar', 'vigenere', 'morse', 'playfair', 'otp', 'rsa']\r\n        if(prevProps.method !== this.props.method) {\r\n            let changed = false;\r\n            for(let listMethod of listMethods) {\r\n                if(this.props.method === listMethod) {\r\n                    changed = true;\r\n                    return this.slider.slickGoTo(listMethods.indexOf(listMethod))\r\n                }\r\n            }\r\n            if(!changed) {\r\n                let current = document.getElementsByClassName('slick-current')[0]\r\n                if(current) {\r\n                    current.classList.remove('slick-current')     \r\n                } \r\n            }\r\n        }\r\n\r\n        if(prevState.activeSlide !== this.state.activeSlide) {\r\n            return this.props.changeMethod(listMethods[this.state.activeSlide])\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const settings = {\r\n            infinite: true,\r\n            speed: 500,\r\n            slidesToShow: this.viewportWidth(),\r\n            slidesToScroll: 1,\r\n            arrows: true,\r\n            initialSlide: 1,\r\n            beforeChange: (current, next) =>\r\n                this.setState({ \r\n                    oldSlide: current, \r\n                    activeSlide: next }),\r\n            afterChange: current => \r\n                this.setState({ \r\n                    activeSlide2: current \r\n                })\r\n        }\r\n        return (\r\n            <div id=\"timeline\">\r\n                <div className=\"timeline_border\"></div>\r\n                <Slider ref={c => (this.slider = c)} {...settings}>\r\n                    <div    value='atbash' \r\n                            key={0} \r\n                            onClick={(evt) => {\r\n                                this.props.changeMethod(evt)\r\n                                this.slider.slickGoTo(0)\r\n                            }}\r\n                    >\r\n                        <div value='atbash' className=\"history_element\">\r\n                            <h3 value='atbash'>600 B.C.</h3>\r\n                            <div value='atbash' className=\"dot\"></div>\r\n                            <div value='atbash' className=\"timeline_description\">Atbash</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div    value='skytale' \r\n                            key={1} \r\n                            onClick={(evt) => {\r\n                                this.props.changeMethod(evt)\r\n                                this.slider.slickGoTo(1)\r\n                            }}\r\n                    >\r\n                        <div value='skytale' className=\"history_element\">\r\n                            <h3 value='skytale'>300 B.C.</h3>\r\n                            <div value='skytale' className=\"dot\"></div>\r\n                            <div value='skytale' className=\"timeline_description\">Skytale</div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div    value='caesar' \r\n                            key={2} \r\n                            onClick={(evt) => {\r\n                                this.props.changeMethod(evt)\r\n                                this.slider.slickGoTo(2)\r\n                            }}\r\n                    >\r\n                        <div value='caesar' className=\"history_element\">\r\n                            <h3 value='caesar'>100 B.C. – 44 B.C.</h3>\r\n                            <div value='caesar' className=\"dot\"></div>\r\n                            <div value='caesar' className=\"timeline_description\">Caesar's Cipher</div>\r\n                        </div>\r\n                    </div>\r\n                    <div    value='vigenere' \r\n                            key={3} \r\n                            onClick={(evt) => {\r\n                                this.props.changeMethod(evt)\r\n                                this.slider.slickGoTo(3)\r\n                            }}\r\n                    >\r\n                        <div value='vigenere' className=\"history_element\">\r\n                            <h3 value='vigenere'>1553</h3>\r\n                            <div value='vigenere' className=\"dot\"></div>\r\n                            <div value='vigenere' className=\"timeline_description\">Vigenère Cipher</div>\r\n                        </div>\r\n                    </div>\r\n                    <div    value='morse' \r\n                            key={4} \r\n                            onClick={(evt) => {\r\n                                this.props.changeMethod(evt)\r\n                                this.slider.slickGoTo(4)\r\n                            }}\r\n                    >\r\n                        <div value='morse' className=\"history_element\">\r\n                            <h3 value='morse'>1837</h3>\r\n                            <div value='morse' className=\"dot\"></div>\r\n                            <div value='morse' className=\"timeline_description\">Morse Code</div>\r\n                        </div>\r\n                    </div>\r\n                    <div    value='playfair' \r\n                            key={5} \r\n                            onClick={(evt) => {\r\n                                this.props.changeMethod(evt)\r\n                                this.slider.slickGoTo(5)\r\n                            }}\r\n                    >\r\n                        <div value='playfair' className=\"history_element\">\r\n                            <h3 value='playfair'>1854</h3>\r\n                            <div value='playfair' className=\"dot\"></div>\r\n                            <div value='playfair' className=\"timeline_description\">Playfair Cipher</div>\r\n                        </div>\r\n                    </div>       \r\n                    <div    value='otp' \r\n                            key={6} \r\n                            onClick={(evt) => {\r\n                                this.props.changeMethod(evt)\r\n                                this.slider.slickGoTo(6)\r\n                            }}\r\n                    >\r\n                        <div value='otp' className=\"history_element\">\r\n                            <h3 value='otp'>1882</h3>\r\n                            <div value='otp' className=\"dot\"></div>\r\n                            <div value='otp' className=\"timeline_description\">One Time Pad</div>\r\n                        </div>\r\n                    </div>     \r\n                    <div    value='rsa' \r\n                            key={7} \r\n                            onClick={(evt) => {\r\n                                this.props.changeMethod(evt)\r\n                                this.slider.slickGoTo(7)\r\n                            }}\r\n                    >\r\n                        <div value='rsa' className=\"history_element\">\r\n                            <h3 value='rsa'>1977</h3>\r\n                            <div value='rsa' className=\"dot\"></div>\r\n                            <div value='rsa' className=\"timeline_description\">RSA</div>\r\n                        </div>\r\n                    </div>               \r\n                </Slider>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Timeline\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <>\r\n        <div className=\"site_footer\">\r\n            <div id=\"footer_links\">\r\n                Footer in Progress\r\n            </div>\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n\r\n","import math from '../math/Math'\r\n\r\nconst otp = (() => {\r\n\r\n    math.restoreForeignChars()\r\n    let userInput, direction, caseFormat, includeChars, key, alphabet\r\n\r\n    const setUserInput = (input) => {\r\n        userInput = String(input);\r\n    }\r\n\r\n    const setForeignChars = (input) => {\r\n        includeChars = input\r\n    }\r\n\r\n    const setAlphabet = (input) => {\r\n        alphabet = input\r\n    }\r\n\r\n    const setCase = (input) => {\r\n        caseFormat = input\r\n    }\r\n\r\n    const setDirection = (input) => {\r\n        direction = input\r\n    }\r\n\r\n    const setKey = (input) => {\r\n        key = input\r\n    }\r\n\r\n    const modulo = (a, b) => {\r\n        return(a % b + b) % b;\r\n    }\r\n\r\n    const transformText = () => {\r\n        let ind = 0;\r\n        let input = []\r\n        for(let i = 0; i < userInput.length; i++) {\r\n            if(alphabet.indexOf(userInput[i].toLowerCase()) !== -1) {\r\n                input.push(userInput[i].toLowerCase())\r\n            }\r\n        }\r\n\r\n        let output = input.map((char) => {\r\n            let encryptedKey\r\n            if(key[ind] && input && alphabet && alphabet.indexOf(char) !== -1) {\r\n                let indexChar = alphabet.indexOf(char)\r\n                let indexKey = alphabet.indexOf(key[ind].toLowerCase())\r\n                let resultIndex = direction === 'encrypt' ? indexChar + indexKey : indexChar - indexKey\r\n                encryptedKey = direction === 'encrypt' ? alphabet[resultIndex % 26] : alphabet[modulo(indexChar - indexKey, 26)]\r\n                ind++\r\n            }\r\n            return encryptedKey\r\n        })\r\n        return output.join('')\r\n    }\r\n\r\n    const encrypt = () => {\r\n        if(direction !== 'crack') {\r\n            let rawOutput = transformText()\r\n            return math.transformCaseAndChars(userInput, rawOutput, caseFormat, includeChars) \r\n        }\r\n    }\r\n\r\n    return {\r\n        setUserInput: setUserInput,\r\n        setDirection: setDirection,\r\n        setForeignChars: setForeignChars,\r\n        setCase: setCase,\r\n        setAlphabet: setAlphabet,\r\n        setKey: setKey,\r\n        encrypt: encrypt\r\n    }\r\n})();\r\n\r\n\r\nexport default otp;","import React from 'react';\nimport BlockElementInput from '../input/BlockElementInput';\nimport BlockElementOutput from './BlockElementOutput';\nimport BlockConnectorEquals from './BlockConnectorEquals';\nimport BlockConnectorPlus from './BlockConnectorPlus';\nimport BlockElementSettings from './BlockElementSettings';\nimport Modal from '../modal/Modal';\nimport Caesar from '../caesar/CaesarLogic';\nimport Affine from '../affine/AffineLogic';\nimport Vigenere from '../vigenere/VigenereLogic';\nimport Playfair from '../playfair/PlayfairLogic';\nimport Morse from '../morse/Morselogic';\nimport Replace from '../replace/ReplaceLogic';\nimport Skytale from '../skytale/SkytaleLogic';\nimport Atbash from '../atbash/AtbashLogic';\nimport Timeline from '../../components/timeline/Timeline';\nimport Footer from './Footer';\nimport Otp from '../onetimepad/otp';\nimport Rsa from '../rsa/RSALogic';\n\nclass BlockElementsCollector extends React.PureComponent {\n  constructor(props) {\n    super();\n    this.state = {\n      modalVisible: false,\n      method: 'skytale',\n      methodNameInset: 'Skytale',\n      inputValue: 'The quick brown fox jumps over the lazy dog.',\n      outputValue: 'Gsv jfrxp yildm ulc qfnkh levi gsv ozab wlt.',\n      direction: 'encrypt',\n      caseFormat: 'maintain',\n      includeChars: 'include',\n      alphabet: 'abcdefghijklmnopqrstuvwxyz',\n      cShift: 3,\n      wordbook: '',\n      affineAlpha: 5,\n      affineBeta: 1,\n      keyword: 'cipher',\n      playSquare: '',\n      toReplaceLetter: 'quick',\n      replaceLetter: 'mean',\n      ringLength: 8,\n      skytaleLength: 1,\n      skytaleProjectedValue: '',\n      alphabetActive: false,\n      otpKey: '',\n      iocInput: 0,\n      iocOutput: 0,\n      prime_one:\n        '250556952327646214427246777488032351712139094643988394726193347352092526616305469220133287929222242315761834129196430398011844978805263868522770723615504744438638381670321613949280530254014602887707960375752016807510602846590492724216092721283154099469988532068424757856392563537802339735359978831013',\n      prime_two:\n        '290245329165570025116016487217740287508837913295571609463914348778319654489118435855243301969001872061575755804802874062021927719647357060447135321577028929269578574760547268310055056867386875959045119093967972205124270441648450825188877095173754196346551952542599226295413057787340278528252358809329',\n      e: 17,\n      phi: 0,\n      d: 0,\n      n: 0,\n      timeToCalculate: '0s',\n      xPos: 0,\n      yPos: 0\n    };\n\n    this.encrypt = this.encrypt.bind(this);\n    this.alphabetUpdate = this.alphabetUpdate.bind(this);\n    this.selectCase = this.selectCase.bind(this);\n    this.includeChars = this.includeChars.bind(this);\n    this.updateInput = this.updateInput.bind(this);\n    this.changeDirection = this.changeDirection.bind(this);\n    this.changeMethod = this.changeMethod.bind(this);\n    this.updateKeyword = this.updateKeyword.bind(this);\n    this.caesarPlusMinus = this.caesarPlusMinus.bind(this);\n    this.skytalePlusMinus = this.skytalePlusMinus.bind(this);\n    this.switchModal = this.switchModal.bind(this);\n    this.setReplaceLetters = this.setReplaceLetters.bind(this);\n    this.genRandomKey = this.genRandomKey.bind(this);\n    this.indexOfCoincidenceInputOutput = this.indexOfCoincidenceInputOutput.bind(\n      this\n    );\n    this.setE = this.setE.bind(this);\n    this.setPrimeTwo = this.setPrimeTwo.bind(this);\n    this.setPrimeOne = this.setPrimeOne.bind(this);\n  }\n\n  //Modal\n  switchModal() {\n    if (!this.state.modalVisible) {\n      this.setState({\n        modalVisible: true\n      });\n    } else {\n      this.setState({\n        modalVisible: false\n      });\n    }\n  }\n\n  //General\n  changeMethod(evt) {\n    let val;\n    const methods = [\n      'caesar',\n      'skytale',\n      'affine',\n      'vigenere',\n      'playfair',\n      'morse',\n      'replace',\n      'atbash',\n      'otp',\n      'rsa',\n      'rot13'\n    ];\n    if (methods.indexOf(evt) !== -1) {\n      val = evt;\n    } else {\n      val = evt.target.value || evt.target.getAttribute('value');\n    }\n    this.setState({\n      alphabet: 'abcdefghijklmnopqrstuvwxyz',\n      caseFormat: 'maintain',\n      includeChars: 'include',\n      method: val\n    });\n\n    switch (val) {\n      case 'caesar':\n        this.setState({\n          alphabetActive: true,\n          methodNameInset: \"Caesar's\"\n        });\n        break;\n      case 'otp':\n        this.genRandomKey();\n        this.setState({\n          alphabetActive: false,\n          methodNameInset: 'OTP'\n        });\n        break;\n      case 'atbash':\n        this.setState({\n          alphabetActive: false,\n          methodNameInset: 'Atbash'\n        });\n        break;\n      case 'affine':\n        this.setState({\n          alphabetActive: false,\n          methodNameInset: 'Atbash'\n        });\n        break;\n      case 'vigenere':\n        this.setState({\n          keyword: 'cipher',\n          alphabetActive: false,\n          methodNameInset: 'Vigenère'\n        });\n        break;\n      case 'playfair':\n        this.setState({\n          keyword: 'cipher',\n          alphabetActive: false,\n          methodNameInset: 'Playfair'\n        });\n        break;\n      case 'rot13':\n        this.setState({\n          alphabetActive: false,\n          methodNameInset: 'ROT13'\n        });\n        break;\n      case 'morse':\n        this.setState({\n          alphabetActive: false,\n          methodNameInset: 'Morse'\n        });\n        break;\n      case 'replace':\n        this.setState({\n          alphabetActive: false,\n          methodNameInset: 'Replace'\n        });\n        break;\n      case 'skytale':\n        this.setState({\n          alphabetActive: false,\n          methodNameInset: 'Skytale'\n        });\n        break;\n      case 'rsa':\n        this.setState({\n          methodNameInset: 'RSA'\n        });\n        break;\n      default:\n        return null;\n    }\n\n    this.encrypt();\n  }\n\n  async updateInput(evt) {\n    if (\n      this.state.inputValue === 'The quick brown fox jumps over the lazy dog.'\n    ) {\n      this.setState({\n        inputValue: ''\n      });\n      evt.target.value = '';\n    } else {\n      this.setState({\n        inputValue: evt.target.value\n      });\n    }\n    this.encrypt();\n  }\n\n  includeChars(evt) {\n    this.setState({\n      includeChars: evt.target.value\n    });\n    this.encrypt();\n  }\n\n  selectCase(evt) {\n    this.setState({\n      caseFormat: evt.target.value\n    });\n    this.encrypt();\n  }\n\n  alphabetUpdate(evt) {\n    this.setState({\n      alphabet: evt.target.value\n    });\n    this.encrypt();\n  }\n\n  changeDirection(evt) {\n    this.setState({\n      direction: evt.target.value\n    });\n    this.encrypt();\n  }\n\n  updateKeyword(evt) {\n    let keyword = evt.target.value.toLowerCase();\n    this.setState({\n      keyword: keyword\n    });\n    this.encrypt();\n  }\n\n  caesarPlusMinus(evt) {\n    if (evt.target.innerText === '+') {\n      if (this.state.cShift > 24) {\n        this.setState({\n          cShift: 0\n        });\n      } else {\n        this.setState(prevState => {\n          return {\n            cShift: prevState.cShift + 1\n          };\n        });\n      }\n    } else {\n      if (this.state.cShift < 1) {\n        this.setState({\n          cShift: 25\n        });\n      } else {\n        this.setState(prevState => {\n          return {\n            cShift: prevState.cShift - 1\n          };\n        });\n      }\n    }\n    this.encrypt();\n  }\n\n  skytalePlusMinus(evt) {\n    if (evt.target.innerText === '+') {\n      if (this.state.ringLength > 19) {\n        this.setState({\n          ringLength: 3\n        });\n      } else {\n        this.setState(prevState => {\n          return {\n            ringLength: prevState.ringLength + 1\n          };\n        });\n      }\n    } else if (evt.target.innerText === '-') {\n      if (this.state.ringLength < 4) {\n        this.setState({\n          ringLength: 20\n        });\n      } else {\n        this.setState(prevState => {\n          return {\n            ringLength: prevState.ringLength - 1\n          };\n        });\n      }\n    }\n    this.encrypt();\n  }\n\n  async componentDidMount() {\n    this.encrypt()\n    if (this.state.wordbook === '') {\n      const url =\n        'https://raw.githubusercontent.com/dwyl/english-words/master/words_dictionary.json';\n      const response = await fetch(url);\n      const data = await response.json();\n      this.setState({\n        wordbook: data\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.outputValue !== this.state.outputValue) {\n      this.indexOfCoincidenceInputOutput();\n    }\n  }\n\n  //Affine\n  setAlpha(evt) {\n    this.setState({\n      affineAlpha: evt.target.value\n    });\n    this.encrypt();\n  }\n\n  setBeta(evt) {\n    this.setState({\n      affineBeta: evt.target.value\n    });\n    this.encrypt();\n  }\n\n  // Replace\n  setReplaceLetters(evt) {\n    if (evt.target.id === 'to_replace_letter') {\n      this.setState({\n        toReplaceLetter: evt.target.value\n      });\n    } else {\n      this.setState({\n        replaceLetter: evt.target.value\n      });\n    }\n    this.encrypt();\n  }\n\n  // Skytale\n  setSkytaleRing(evt) {\n    this.setState({\n      ringLength: evt.target.value\n    });\n  }\n\n  // otp\n  genRandomKey() {\n    let randomArr = [];\n    let letters = this.state.alphabet.split('');\n\n    let input = [];\n    for (let i = 0; i < this.state.inputValue.length; i++) {\n      if (this.state.alphabet.indexOf(this.state.inputValue[i] !== -1)) {\n        input.push(this.state.inputValue[i]);\n      }\n    }\n\n    let userInputLength = input.length;\n\n    for (let i = 0; i < userInputLength; i++) {\n      randomArr.push(letters[Math.floor(Math.random() * 26)]);\n    }\n\n    this.setState({\n      otpKey: randomArr.join('')\n    });\n\n    this.encrypt();\n  }\n\n  //ioc\n  calcIndexOfCoincidence(input) {\n    if (input) {\n      if (!this.state.inputValue) return;\n      if (this.state.inputValue.length === 0) return;\n    }\n    if (!input) {\n      if (!this.state.outputValue) return;\n      if (this.state.outputValue.length === 0) return;\n    }\n\n    //calc for input or output -> true = input, false = output\n    let inputValue = input\n      ? this.state.inputValue.toString()\n      : this.state.outputValue.toString();\n\n    //don't use foreign chars\n    let cleanedInput = inputValue.split('').filter(character => {\n      return this.state.alphabet.indexOf(character.toLowerCase()) !== -1;\n    });\n\n    //Return if only signs\n    if (cleanedInput.length === 0) return;\n\n    // count all the occurences of every letter in the input\n    let arrCounts = new Array(26).fill(0);\n    for (let character of cleanedInput) {\n      let indexOfCharacter = this.state.alphabet.indexOf(\n        character.toLowerCase()\n      );\n      arrCounts[indexOfCharacter]++;\n    }\n\n    // don't use letters that have a count of one as 1 * (1 - 1) === 0\n    let arrCountsCleaned = arrCounts.filter(element => element > 1);\n\n    // calculate count ( count - 1 ) and sum all the results up\n    let countCi = arrCountsCleaned\n      .map(count => {\n        return count * (count - 1);\n      })\n      .reduce((a, b) => a + b, 0);\n\n    //final calculation with countsum and inputlength\n    let ioc = countCi / (cleanedInput.length * (cleanedInput.length - 1));\n\n    return !isNaN(ioc) ? ioc : '0';\n  }\n\n  indexOfCoincidenceInputOutput() {\n    this.setState({\n      iocInput: this.calcIndexOfCoincidence(true),\n      iocOutput: this.calcIndexOfCoincidence(false)\n    });\n  }\n\n  //rsa\n  setPrimeOne(val) {\n    if (!isNaN(val)) {\n      this.setState({\n        prime_one: val\n      });\n    }\n    if (val !== '1') {\n      this.encrypt();\n    }\n  }\n\n  setPrimeTwo(val) {\n    if (!isNaN(val)) {\n      this.setState(prevState => {\n        return {\n          prime_two: val\n        };\n      });\n    }\n    if (val !== '1') {\n      this.encrypt();\n    }\n  }\n\n  setE(val) {\n    let tVal = val.target.value;\n    if (!isNaN(tVal) && tVal !== null) {\n      this.setState(prevState => {\n        return {\n          e: tVal\n        };\n      });\n    }\n    this.encrypt();\n  }\n\n  async encrypt() {\n    this.setState(prevState => {\n      let input = prevState.inputValue;\n      let alphabet = prevState.alphabet;\n      let direction = prevState.direction;\n      let caseFormat = prevState.caseFormat;\n      let foreignChars = prevState.includeChars;\n      let method = prevState.method;\n      if (input.length === 0) return null;\n\n      if (direction === 'crack') {\n        if (method === 'caesar') {\n          Caesar.setWordbook(prevState.wordbook);\n          Caesar.setUserInput(input);\n          Caesar.setAlphabet(alphabet);\n          Caesar.setSaltInput(prevState.cShift);\n          Caesar.setDirection(direction);\n          Caesar.setCase(caseFormat);\n          Caesar.setForeignChars(foreignChars);\n          return {\n            outputValue: Caesar.encrypt()\n          };\n        } else if (method === 'atbash') {\n          return {\n            outputValue: Atbash.encrypt()\n          };\n        } else if (method === 'rot13') {\n          Caesar.setUserInput(input);\n          Caesar.setAlphabet(alphabet);\n          Caesar.setSaltInput(13);\n          Caesar.setDirection('decrypt');\n          Caesar.setCase(caseFormat);\n          Caesar.setForeignChars(foreignChars);\n          return {\n            outputValue: Caesar.encrypt()\n          };\n        } else {\n          return {\n            outputValue: ''\n          };\n        }\n      }\n\n      switch (method) {\n        case 'rot13':\n          Caesar.setUserInput(input);\n          Caesar.setAlphabet(alphabet);\n          Caesar.setSaltInput(13);\n          Caesar.setDirection(direction);\n          Caesar.setCase(caseFormat);\n          Caesar.setForeignChars(foreignChars);\n          return {\n            outputValue: Caesar.encrypt()\n          };\n        case 'caesar':\n          Caesar.setUserInput(input);\n          Caesar.setAlphabet(alphabet);\n          Caesar.setSaltInput(prevState.cShift);\n          Caesar.setDirection(direction);\n          Caesar.setCase(caseFormat);\n          Caesar.setForeignChars(foreignChars);\n          return {\n            outputValue: Caesar.encrypt()\n          };\n        case 'rsa':\n          if (\n            !prevState.prime_one ||\n            !prevState.prime_two ||\n            !prevState.e ||\n            !input ||\n            prevState.prime_one === 1 ||\n            prevState.prime_two === 1\n          )\n            return null;\n          Rsa.setUserInput(input);\n          Rsa.setPrimeOne(prevState.prime_one);\n          Rsa.setPrimeTwo(prevState.prime_two);\n          Rsa.setE(prevState.e);\n\n          if (direction === 'encrypt') {\n            return {\n              n: Rsa.calcN(),\n              phi: Rsa.calcPhi(),\n              d: Rsa.calcD(),\n              outputValue:\n                Rsa.encrypt()[0] !== '!' ? Rsa.encrypt()[0] : Rsa.encrypt(),\n              timeToCalculate:\n                Rsa.encrypt()[1] !== '!'\n                  ? Rsa.encrypt()[1]\n                  : 'something went wrong here'\n            };\n          } else if (direction === 'decrypt') {\n            let decrypted = Rsa.decrypt();\n            return {\n              outputValue: decrypted[0],\n              timeToCalculate: decrypted[1]\n            };\n          }\n          break;\n        case 'otp':\n          Otp.setUserInput(input);\n          Otp.setCase(caseFormat);\n          Otp.setForeignChars(foreignChars);\n          Otp.setDirection(direction);\n          Otp.setKey(prevState.otpKey);\n          Otp.setAlphabet(alphabet);\n          return {\n            outputValue: Otp.encrypt()\n          };\n        case 'atbash':\n          Atbash.setUserInput(input);\n          Atbash.setCase(caseFormat);\n          Atbash.setForeignChars(foreignChars);\n          return {\n            outputValue: Atbash.encrypt()\n          };\n        case 'affine':\n          Affine.setAlphabet(alphabet);\n          Affine.setUserInput(input);\n          Affine.setAlpha(prevState.affineAlpha);\n          Affine.setBeta(prevState.affineBeta);\n          Affine.setDirection(direction);\n          Affine.setForeignChars(foreignChars);\n          Affine.setCase(caseFormat);\n          return {\n            outputValue: Affine.encrypt()\n          };\n        case 'vigenere':\n          Vigenere.setUserInput(input);\n          Vigenere.setAlphabet(alphabet);\n          Vigenere.setDirection(direction);\n          Vigenere.setForeignChars(foreignChars);\n          Vigenere.setCase(caseFormat);\n          Vigenere.setKeyword(prevState.keyword);\n          return {\n            outputValue: Vigenere.encrypt()\n          };\n        case 'playfair':\n          Playfair.setUserInput(input);\n          Playfair.setAlphabet(alphabet);\n          Playfair.setDirection(direction);\n          Playfair.setKeyPhrase(prevState.keyword);\n          return {\n            outputValue: Playfair.encrypt(),\n            playSquare: Playfair.getSquare()\n          };\n        case 'morse':\n          Morse.setUserInput(input);\n          Morse.setDirection(direction);\n          return {\n            outputValue: Morse.encrypt()\n          };\n        case 'replace':\n          Replace.setUserInput(input);\n          Replace.setToReplaceLetter(prevState.toReplaceLetter);\n          Replace.setReplaceLetter(prevState.replaceLetter);\n          return {\n            outputValue: Replace.encrypt()\n          };\n        case 'skytale':\n          Skytale.setDirection(direction);\n          Skytale.setCase(caseFormat);\n          Skytale.setUserInput(input);\n          Skytale.setRingLength(prevState.ringLength);\n          return {\n            outputValue: Skytale.encrypt()[0],\n            skytaleLength: Skytale.encrypt()[1],\n            skytaleProjectedValue: Skytale.getProjectedValue()\n          };\n        default:\n          return null;\n      }\n    });\n  }\n\n\n  /*\n  _onMouseMoveConverter(e) {\n    this.setState({ xPos: e.clientX})\n    this.setState({ yPos: e.clientY})\n    console.log(this.state.yPos)\n  }\n  returnCNumber = () => {\n    let windowWidth = window.innerWidth\n    let windowHeight = window.innerHeight\n    let adjustedNumber = Math.round(this.state.xPos / windowWidth * 50)\n    let adjustedHeight = Math.round(this.state.yPos / windowHeight * 100)\n    let da = 'M0 0 C' + adjustedNumber + ' ' + adjustedHeight + ' 80 100 100 0 Z'\n    console.log(da)\n    return da\n     onMouseMove={this._onMouseMoveConverter.bind(this)}\n\n     PROBLEM IST WEG WENN UNTEN MEHR PLATZ IST BITTESCHÖN DESSHALB FOOTER EVTL AM BOTTOM UND DAZU EIN ELEMENT WAS AUCH IMMER! !!!!!!\n  }\n  */\n\n  render() {\n    return (\n      <div id='converter'>\n      {/*\n        <svg id=\"curveUpColor\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"100%\" height=\"15vh\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n          <path d='M0 0 C20 50 80 50 100 0 Z' fill=\"url(#grad3)\"></path>\n        </svg>*/}\n        <Timeline changeMethod={this.changeMethod} method={this.state.method} />\n        <div id='block_container'>\n          <BlockElementInput\n            inputValue={this.state.inputValue}\n            updateInput={this.updateInput}\n            ioc={this.state.iocInput}\n          />\n          <BlockConnectorPlus />\n          <BlockElementSettings\n            updateKeyword={this.updateKeyword}\n            keyword={this.state.keyword}\n            changeDirection={this.changeDirection}\n            method={this.state.method}\n            methodNameInset={this.state.methodNameInset}\n            switchModal={this.switchModal}\n            alphabet={this.state.alphabet}\n            alphabetUpdate={this.alphabetUpdate}\n            cShift={this.state.cShift}\n            selectCase={this.selectCase}\n            includeChars={this.includeChars}\n            direction={this.state.direction}\n            setAlpha={this.setAlpha}\n            setBeta={this.setBeta}\n            playSquare={this.state.playSquare}\n            setReplaceLetters={this.setReplaceLetters}\n            toReplaceLetter={this.state.toReplaceLetter}\n            replaceLetter={this.state.replaceLetter}\n            ringLength={this.state.ringLength}\n            skytaleLength={this.state.skytaleLength}\n            skytaleProjectedValue={this.state.skytaleProjectedValue}\n            alphabetActive={this.state.alphabetActive}\n            inputValue={this.state.inputValue}\n            genRandomKey={this.genRandomKey}\n            otpKey={this.state.otpKey}\n            setPrimeOne={this.setPrimeOne}\n            setPrimeTwo={this.setPrimeTwo}\n            setE={this.setE}\n            e={this.state.e}\n            prime_one={this.state.prime_one}\n            prime_two={this.state.prime_two}\n            phi={this.state.phi}\n            n={this.state.n}\n            d={this.state.d}\n            timeToCalculate={this.state.timeToCalculate}\n            caesarPlusMinus={this.caesarPlusMinus}\n            skytalePlusMinus={this.skytalePlusMinus}\n          />\n          <BlockConnectorEquals />\n          <BlockElementOutput\n            outputValue={this.state.outputValue}\n            ioc={this.state.iocOutput}\n          />\n        </div>\n        <Footer />\n        <Modal\n          switchModal={this.switchModal}\n          changeMethod={this.changeMethod}\n          modalVisible={this.state.modalVisible}\n        />\n      </div>\n    );\n  }\n}\n\nexport default BlockElementsCollector;\n","import React from 'react';\r\n\r\n\r\nfunction Hero() {\r\n\r\n  const scrollToSignup = (e) => {\r\n    setTimeout(() => {\r\n      window.location.hash = '#timeline';  \r\n      let navbar = document.getElementsByClassName('site_header')[0]\r\n      let navbarHeight = navbar.clientHeight;\r\n      let scrollHeight = document.querySelector('#timeline').offsetTop - navbarHeight;\r\n      window.scroll(0,scrollHeight);\r\n      e.preventDefault();\r\n    }, 200)\r\n    setTimeout(() => {\r\n      let svg = document.getElementById('scrolldown')\r\n      if(svg.classList.contains('rollaway')) {\r\n        svg.classList.remove('rollaway')\r\n      }  \r\n    }, 700)\r\n  }\r\n\r\n  const removeBounce = () => {\r\n    let svg = document.getElementById('scrolldown')\r\n    if(svg) {\r\n      svg.classList.remove('bounce') \r\n    }\r\n  }\r\n\r\n  const addClass = () => {\r\n    let svg = document.getElementById('scrolldown')\r\n    if(!svg.classList.contains('rollaway')) {\r\n      svg.classList.add('bounce')\r\n    }\r\n  }\r\n\r\n  const addRollawayAnim = () => {\r\n    let svg = document.getElementById('scrolldown')\r\n    if(!svg.classList.contains('rollaway')) {\r\n      svg.classList.add('rollaway')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div id='hero'>\r\n        <div id=\"hero_text\">\r\n          <h1>A Cryptographic Playground<br></br>for Everybody.</h1>\r\n          <h3>Unlock Free Access to all Features&nbsp; \r\n            <div className=\"hero_link\"><a href=\"#timeline\">now</a>\r\n            </div>\r\n          </h3>\r\n        </div>\r\n        <div className=\"hero_a_container\" onClick={e => {scrollToSignup(e)}}>\r\n          <svg  id=\"scrolldown\" \r\n                xmlns=\"http://www.w3.org/2000/svg\" \r\n                height=\"64\" \r\n                viewBox=\"0 0 24 24\" \r\n                width=\"64\" \r\n                className=\"bounce\" \r\n                onMouseOut={addClass} \r\n                onMouseMove={removeBounce}\r\n                onClick={addRollawayAnim}\r\n                >\r\n            <linearGradient id=\"grad2\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\r\n              <stop offset=\"0%\" style={{stopColor:'#f54444', stopOpacity:'1'}} />\r\n              <stop offset=\"100%\" style={{stopColor:'#3daae9', stopOpacity:'1'}} />\r\n            </linearGradient>\r\n            <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\r\n            <circle id=\"circle1\" cx=\"15.5\" cy=\"9.5\" r=\"1.5\" fill=\"url(#grad2)\"/>\r\n            <circle cx=\"8.5\" cy=\"9.5\" r=\"1.5\" fill=\"url(#grad2)\"/>\r\n            <path fill=\"url(#grad2)\" d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8zm-5-6c.78 2.34 2.72 4 5 4s4.22-1.66 5-4H7z\"/>\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Hero;","import React from 'react'\r\nimport logo from './img/key.png'\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <div className=\"site_header\">\r\n        <div className='site_title'>\r\n          <p>cryptx</p>\r\n          <img src={logo} id=\"keyimage\" alt=\"logo\"></img>\r\n        </div>\r\n        <div id=\"header_links\">\r\n          <a href=\"login.html\" id=\"login\">Login</a>\r\n          <a href=\"signup.html\" id=\"signup\">Sign up</a>\r\n          <a href=\"about.html\" id=\"about\">About</a>\r\n        </div>\r\n      </div>\r\n      <div id=\"header_margin\"></div>\r\n    </>\r\n\r\n  )\r\n}\r\n\r\nexport default Header\r\n\r\n","import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    color: '#e1e1e1',\r\n    borderColor: 'white'\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n    color: '#e1e1e1',\r\n    borderColor: 'white'\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n    color: '#e1e1e1',\r\n    borderColor: 'white'\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n    color: '#e1e1e1',\r\n    borderColor: 'white'\r\n  },\r\n}));\r\n\r\nexport default function SignIn() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div id=\"signup_section\">\r\n      <svg fill=\"rgb(23, 114, 167)\" id=\"curveDownColor\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"100%\" height=\"15vh\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\r\n        <linearGradient id=\"grad2\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\r\n          <stop offset=\"0%\" style={{stopColor:'rgb(13, 78, 115)', stopOpacity:'1'}} />\r\n          <stop offset=\"100%\" style={{stopColor:'rgb(23, 114, 167)', stopOpacity:'1'}} />\r\n        </linearGradient>\r\n        <path d=\"M0 0 C 50 100 80 100 100 0 Z\" fill=\"url(#grad2)\"></path>\r\n      </svg>\r\n      <div id=\"signup_form\">\r\n        <Container id=\"signin_mainpage\" component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <div className={classes.paper}>\r\n                <Avatar className={classes.avatar}>\r\n                <LockOutlinedIcon />\r\n                </Avatar>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                Sign in\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"email\"\r\n                    label=\"Email Address\"\r\n                    name=\"email\"\r\n                    autoComplete=\"email\"\r\n                    autoFocus\r\n                />\r\n                <TextField\r\n                    variant=\"outlined\"\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                />\r\n                <FormControlLabel\r\n                    control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                    label=\"Remember me\"\r\n                />\r\n                <Button\r\n                    type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    className={classes.submit}\r\n                >\r\n                    Sign In\r\n                </Button>\r\n                <Grid container>\r\n                    <Grid item xs>\r\n                    <Link href=\"#\" variant=\"body2\">\r\n                        Forgot password?\r\n                    </Link>\r\n                    </Grid>\r\n                    <Grid item>\r\n                    <Link href=\"#\" variant=\"body2\">\r\n                        {\"Don't have an account? Sign Up\"}\r\n                    </Link>\r\n                    </Grid>\r\n                </Grid>\r\n                </form>\r\n            </div>\r\n          <Box mt={8}>\r\n            <Copyright />\r\n          </Box>\r\n          </Container>\r\n        <Container id=\"signup_mainpage\" component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <div className={classes.paper}>\r\n            <Avatar className={classes.avatar}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Sign up\r\n            </Typography>\r\n            <form className={classes.form} noValidate>\r\n              <Grid container spacing={2}>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    autoComplete=\"fname\"\r\n                    name=\"firstName\"\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"firstName\"\r\n                    label=\"First Name\"\r\n                    autoFocus\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"lastName\"\r\n                    label=\"Last Name\"\r\n                    name=\"lastName\"\r\n                    autoComplete=\"lname\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    id=\"email\"\r\n                    label=\"Email Address\"\r\n                    name=\"email\"\r\n                    autoComplete=\"email\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <TextField\r\n                    variant=\"outlined\"\r\n                    required\r\n                    fullWidth\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    id=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <FormControlLabel\r\n                    control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\r\n                    label=\"I want to receive inspiration, marketing promotions and updates via email.\"\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n              >\r\n                Sign Up\r\n              </Button>\r\n              <Grid container justify=\"flex-end\">\r\n                <Grid item>\r\n                  <Link href=\"#\" variant=\"body2\">\r\n                    Already have an account? Sign in\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </form>\r\n          </div>\r\n          <Box mt={5}>\r\n          <Copyright />\r\n          </Box>\r\n        </Container>\r\n      </div>\r\n      <svg  id=\"curveUpColor\" xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"100%\" height=\"100\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\r\n        <defs>\r\n          <linearGradient id=\"grad1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\r\n            <stop offset=\"0%\" style={{stopColor:'rgb(13, 78, 115)', stopOpacity:'1'}} />\r\n            <stop offset=\"100%\" style={{stopColor:'rgb(23, 114, 167)', stopOpacity:'1'}} />\r\n          </linearGradient>\r\n        </defs>\r\n\t\t\t\t<path d=\"M0 100 C 20 0 50 0 100 100 Z\" fill=\"url(#grad1)\"></path>\r\n\t\t\t</svg>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport BlockElementCollector from './general/BlockElementsCollector';\r\nimport Hero from './hero';\r\nimport Header from './general/Header';\r\nimport Signup from './signup'\r\n\r\nfunction App () {\r\n    return (\r\n    <>\r\n      <Header />\r\n      <Hero />\r\n      <BlockElementCollector />\r\n    </>\r\n  )\r\n}  \r\n\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/style.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\n\nif (process.env.NODE_ENV !== 'production') {\n    const {whyDidYouUpdate} = require('why-did-you-update');\n    whyDidYouUpdate(React);\n  }\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/key.9a3a29fc.png\";"],"sourceRoot":""}